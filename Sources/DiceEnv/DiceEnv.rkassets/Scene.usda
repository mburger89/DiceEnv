#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.120.2)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

reorder rootPrims = ["Root", "GoldenDroid_D04"]

def Xform "Root"
{
    reorder nameChildren = ["Dice", "PaintedWorn", "Sapphire", "SteelDarkAged", "Clouds", "diceTray", "diceTray", "BlueEdge", "TraySkins", "GoldenDroid", "DarkMarble"]
    def Xform "DarkMarble" (
        active = true
    )
    {
        reorder nameChildren = ["DarkMarble_D20", "DarkMarble_D12", "DarkMarble_D10", "DarkMarble_D08", "DarkMarble_D06", "DarkMarble_D04"]
        def Material "DarkMarble_D20"
        {
            token outputs:mtlx:surface.connect = </Root/DarkMarble/DarkMarble_D20/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/DarkMarble/DarkMarble_D20/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/DarkMarble/DarkMarble_D20/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness.connect = None
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/DarkMarble/DarkMarble_D20/Metalness.outputs:out>
                float3 inputs:normal.connect = </Root/DarkMarble/DarkMarble_D20/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/DarkMarble/DarkMarble_D20/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (0.6953125, 109.42578)
                int ui:nodegraph:node:stackingOrder = 100
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DarkMarble/D20_DarkMarble/D20_DarkMarble_baseColor.jpg@
                string inputs:filtertype
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-370.3047, -172.95312)
                int ui:nodegraph:node:stackingOrder = 118
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DarkMarble/D20_DarkMarble/D20_DarkMarble_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-594.4414, -141.07031)
                int ui:nodegraph:node:stackingOrder = 119
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DarkMarble/D20_DarkMarble/D20_DarkMarble_roughness.jpg@
                string inputs:filtertype
                float outputs:out
                float2 ui:nodegraph:node:pos = (-817.07336, -102.82156)
                int ui:nodegraph:node:stackingOrder = 120
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DarkMarble/D20_DarkMarble/D20_DarkMarble_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-562.08307, 309.01675)
                int ui:nodegraph:node:stackingOrder = 122
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DarkMarble/D20_DarkMarble/D20_DarkMarble_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-261.91226, 317.72308)
                int ui:nodegraph:node:stackingOrder = 123
            }
        }

        def Material "DarkMarble_D12"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/DarkMarble/DarkMarble_D12/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/DarkMarble/DarkMarble_D12/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/DarkMarble/DarkMarble_D12/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic
                float3 inputs:normal.connect = </Root/DarkMarble/DarkMarble_D12/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/DarkMarble/DarkMarble_D12/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 60
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DarkMarble/D12_DarkMarble/D12_DarkMarble_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-604.3489, -482.86978)
                int ui:nodegraph:node:stackingOrder = 66
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DarkMarble/D12_DarkMarble/D12_DarkMarble_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 67
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DarkMarble/D12_DarkMarble/D12_DarkMarble_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 69
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DarkMarble/D12_DarkMarble/D12_DarkMarble_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 70
            }
        }

        def Material "DarkMarble_D10"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/DarkMarble/DarkMarble_D10/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-252.73111, 32.352287)
            int ui:nodegraph:node:stackingOrder = 1
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/DarkMarble/DarkMarble_D10/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/DarkMarble/DarkMarble_D10/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic
                float3 inputs:normal.connect = </Root/DarkMarble/DarkMarble_D10/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/DarkMarble/DarkMarble_D10/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 60
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DarkMarble/D10_DarkMarble/D10_DarkMarble_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-604.3489, -482.86978)
                int ui:nodegraph:node:stackingOrder = 70
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DarkMarble/D10_DarkMarble/D10_DarkMarble_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 72
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DarkMarble/D10_DarkMarble/D10_DarkMarble_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 74
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DarkMarble/D10_DarkMarble/D10_DarkMarble_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 75
            }
        }

        def Material "DarkMarble_D08"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/DarkMarble/DarkMarble_D08/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-232.73111, 52.352287)
            int ui:nodegraph:node:stackingOrder = 2
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/DarkMarble/DarkMarble_D08/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/DarkMarble/DarkMarble_D08/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic
                float3 inputs:normal.connect = </Root/DarkMarble/DarkMarble_D08/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/DarkMarble/DarkMarble_D08/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 60
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DarkMarble/D08_DarkMarble/D08_DarkMarble_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-604.3489, -482.86978)
                int ui:nodegraph:node:stackingOrder = 74
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DarkMarble/D08_DarkMarble/D08_DarkMarble_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 76
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DarkMarble/D08_DarkMarble/D08_DarkMarble_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 77
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DarkMarble/D08_DarkMarble/D08_DarkMarble_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 79
            }
        }

        def Material "DarkMarble_D06"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/DarkMarble/DarkMarble_D06/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-212.73111, 72.35229)
            int ui:nodegraph:node:stackingOrder = 3
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/DarkMarble/DarkMarble_D06/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/DarkMarble/DarkMarble_D06/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic
                float3 inputs:normal.connect = </Root/DarkMarble/DarkMarble_D06/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/DarkMarble/DarkMarble_D06/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 60
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DarkMarble/D06_DarkMarble/D06_DarkMarble_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-604.3489, -482.86978)
                int ui:nodegraph:node:stackingOrder = 81
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DarkMarble/D06_DarkMarble/D06_DarkMarble_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 82
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DarkMarble/D06_DarkMarble/D06_DarkMarble_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 84
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DarkMarble/D06_DarkMarble/D06_DarkMarble_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 85
            }
        }

        def Material "DarkMarble_D04"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/DarkMarble/DarkMarble_D04/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-192.73111, 92.35229)
            int ui:nodegraph:node:stackingOrder = 4
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/DarkMarble/DarkMarble_D04/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/DarkMarble/DarkMarble_D04/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic
                float3 inputs:normal.connect = </Root/DarkMarble/DarkMarble_D04/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/DarkMarble/DarkMarble_D04/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 60
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DarkMarble/D04_DarkMarble/D04_DarkMarble_baseColor.png@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-604.3489, -482.86978)
                int ui:nodegraph:node:stackingOrder = 88
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DarkMarble/D04_DarkMarble/D04_DarkMarble_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 89
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DarkMarble/D04_DarkMarble/D04_DarkMarble_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 90
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DarkMarble/D04_DarkMarble/D04_DarkMarble_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 92
            }
        }
    }

    def Xform "Dice" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 1.5707963, 0)
        }
    )
    {
        reorder nameChildren = ["D20", "D12", "D10", "D08", "D06", "D04", "D100"]
        quatf xformOp:orient = (0.7058273, 0, 0.708384, 0)
        float3 xformOp:translate = (11.662849, 0.9637892, -11.368095)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "D20" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (0, 0, 0)
            }
            references = @D20.usdz@
        )
        {
            rel material:binding = </Root/BlueEdge/BlueEdge_D20> (
                bindMaterialAs = "weakerThanDescendants"
            )
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (6.87302, 0.0000019073486, -6.476927)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "D12" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (0, 0, 0)
            }
            references = @D12.usdz@
        )
        {
            rel material:binding = </Root/BlueEdge/BlueEdge_D12> (
                bindMaterialAs = "weakerThanDescendants"
            )
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (6.87302, 0.0000019073486, -8.680351)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "D10" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (0, 0, 0)
            }
            references = @D10.usdz@
        )
        {
            rel material:binding = </Root/BlueEdge/BlueEdge_D10> (
                bindMaterialAs = "weakerThanDescendants"
            )
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (6.873022079467773, -0.018817663192749023, -10.8202543258667)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "D08" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (0, 0, 0)
            }
            references = @D08.usdz@
        )
        {
            rel material:binding = </Root/BlueEdge/BlueEdge_D08> (
                bindMaterialAs = "weakerThanDescendants"
            )
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (6.87302, 0.0000019073486, -12.959806)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "D06" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (0, 0, 0)
            }
            references = @D06.usdz@
        )
        {
            rel material:binding = </Root/BlueEdge/BlueEdge_D06> (
                bindMaterialAs = "weakerThanDescendants"
            )
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (6.87302, 0.0000019073486, -14.721533)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "D04" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (0, 0, 0)
            }
            references = @D04.usdz@
        )
        {
            rel material:binding = </Root/BlueEdge/BlueEdge_D04> (
                bindMaterialAs = "weakerThanDescendants"
            )
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (6.755361557006836, 0.0000020265579223632812, -16.62636375427246)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "D100" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (0, 0, 0)
            }
            references = @D10.usdz@
        )
        {
            rel material:binding = </Root/Sapphire/Sapphire_D10> (
                bindMaterialAs = "weakerThanDescendants"
            )
            float2 ui:nodegraph:node:pos = (-362.77792, -68.96094)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (9.54050064086914, -0.01880747079849243, -10.82026481628418)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "GoldenDroid" (
        active = true
    )
    {
        reorder nameChildren = ["GoldenDroid_D04", "GoldenDroid_D06", "GoldenDroid_D08", "GoldenDroid_D10", "GoldenDroid_D12", "GoldenDroid_D20"]
        def Material "GoldenDroid_D04"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/GoldenDroid/GoldenDroid_D04/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-152.73111, 132.3523)
            int ui:nodegraph:node:stackingOrder = 6
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/GoldenDroid/GoldenDroid_D04/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/GoldenDroid/GoldenDroid_D04/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 0.9
                float3 inputs:normal.connect = </Root/GoldenDroid/GoldenDroid_D04/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/GoldenDroid/GoldenDroid_D04/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 95
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @GoldenDroid/D04_GoldenDroid/D04_GoldenDroid_baseColor.png@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-604.3489, -482.86978)
                int ui:nodegraph:node:stackingOrder = 96
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @GoldenDroid/D04_GoldenDroid/D04_GoldenDroid_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 97
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @GoldenDroid/D04_GoldenDroid/D04_GoldenDroid_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 98
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @GoldenDroid/D04_GoldenDroid/D04_GoldenDroid_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 99
            }
        }

        def Material "GoldenDroid_D06"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/GoldenDroid/GoldenDroid_D06/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-172.73111, 112.35229)
            int ui:nodegraph:node:stackingOrder = 5
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/GoldenDroid/GoldenDroid_D06/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/GoldenDroid/GoldenDroid_D06/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 0.9
                float3 inputs:normal.connect = </Root/GoldenDroid/GoldenDroid_D06/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/GoldenDroid/GoldenDroid_D06/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 98
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @GoldenDroid/D06_GoldenDroid/D06_GoldenDroid_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-604.3489, -482.86978)
                int ui:nodegraph:node:stackingOrder = 99
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @GoldenDroid/D06_GoldenDroid/D06_GoldenDroid_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 101
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @GoldenDroid/D06_GoldenDroid/D06_GoldenDroid_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 102
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @GoldenDroid/D06_GoldenDroid/D06_GoldenDroid_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 103
            }
        }

        def Material "GoldenDroid_D08"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/GoldenDroid/GoldenDroid_D08/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-152.73111, 132.3523)
            int ui:nodegraph:node:stackingOrder = 6
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/GoldenDroid/GoldenDroid_D08/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/GoldenDroid/GoldenDroid_D08/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 0.9
                float3 inputs:normal.connect = </Root/GoldenDroid/GoldenDroid_D08/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/GoldenDroid/GoldenDroid_D08/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 103
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @GoldenDroid/D08_GoldenDroid/D08_GoldenDroid_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-604.3489, -482.86978)
                int ui:nodegraph:node:stackingOrder = 104
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @GoldenDroid/D08_GoldenDroid/D08_GoldenDroid_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 105
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @GoldenDroid/D08_GoldenDroid/D08_GoldenDroid_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 106
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @GoldenDroid/D08_GoldenDroid/D08_GoldenDroid_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 107
            }
        }

        def Material "GoldenDroid_D10"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/GoldenDroid/GoldenDroid_D10/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-132.73111, 152.3523)
            int ui:nodegraph:node:stackingOrder = 7
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/GoldenDroid/GoldenDroid_D10/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/GoldenDroid/GoldenDroid_D10/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 0.9
                float3 inputs:normal.connect = </Root/GoldenDroid/GoldenDroid_D10/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/GoldenDroid/GoldenDroid_D10/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 107
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @GoldenDroid/D10_GoldenDroid/D10_GoldenDroid_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-604.3489, -482.86978)
                int ui:nodegraph:node:stackingOrder = 108
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @GoldenDroid/D10_GoldenDroid/D10_GoldenDroid_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 109
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @GoldenDroid/D10_GoldenDroid/D10_GoldenDroid_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 113
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @GoldenDroid/D10_GoldenDroid/D10_GoldenDroid_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 117
            }
        }

        def Material "GoldenDroid_D12"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/GoldenDroid/GoldenDroid_D12/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-112.73111, 172.3523)
            int ui:nodegraph:node:stackingOrder = 8
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/GoldenDroid/GoldenDroid_D12/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/GoldenDroid/GoldenDroid_D12/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 0.9
                float3 inputs:normal.connect = </Root/GoldenDroid/GoldenDroid_D12/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/GoldenDroid/GoldenDroid_D12/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 112
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @GoldenDroid/D12_GoldenDroid/D12_GoldenDroid_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-604.3489, -482.86978)
                int ui:nodegraph:node:stackingOrder = 113
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @GoldenDroid/D12_GoldenDroid/D12_GoldenDroid_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 114
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @GoldenDroid/D12_GoldenDroid/D12_GoldenDroid_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 115
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @GoldenDroid/D12_GoldenDroid/D12_GoldenDroid_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 119
            }
        }

        def Material "GoldenDroid_D20"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/GoldenDroid/GoldenDroid_D20/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-92.73111, 192.3523)
            int ui:nodegraph:node:stackingOrder = 9
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/GoldenDroid/GoldenDroid_D20/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/GoldenDroid/GoldenDroid_D20/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor = (0, 0, 0) (
                    colorSpace = "srgb_displayp3"
                )
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 0.9
                float3 inputs:normal.connect = </Root/GoldenDroid/GoldenDroid_D20/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/GoldenDroid/GoldenDroid_D20/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 141
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @GoldenDroid/D20_GoldenDroid/D20_GoldenDroid_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-604.3489, -482.86978)
                int ui:nodegraph:node:stackingOrder = 142
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @GoldenDroid/D20_GoldenDroid/D20_GoldenDroid_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 143
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @GoldenDroid/D20_GoldenDroid/D20_GoldenDroid_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 144
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @GoldenDroid/D20_GoldenDroid/D20_GoldenDroid_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 146
            }
        }
    }

    def Xform "PaintedWorn" (
        active = true
    )
    {
        reorder nameChildren = ["PaintedWorn_D04", "PaintedWorn_D06", "PaintedWorn_D08", "PaintedWorn_D10", "PaintedWorn_D12", "PaintedWorn_D20"]
        def Material "PaintedWorn_D04"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/PaintedWorn/PaintedWorn_D04/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-132.73111, 152.3523)
            int ui:nodegraph:node:stackingOrder = 7
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.35065, 167.71402)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 104

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/PaintedWorn/PaintedWorn_D04/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/PaintedWorn/PaintedWorn_D04/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 0
                float3 inputs:normal.connect = </Root/PaintedWorn/PaintedWorn_D04/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/PaintedWorn/PaintedWorn_D04/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 118
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @PaintedWorn/D04_PaintedWorn/D04_PaintedWorn_baseColor.png@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-604.3489, -482.86978)
                int ui:nodegraph:node:stackingOrder = 106
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @PaintedWorn/D04_PaintedWorn/D04_PaintedWorn_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.91434, -206.45667)
                int ui:nodegraph:node:stackingOrder = 113
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @PaintedWorn/D04_PaintedWorn/D04_PaintedWorn_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-605.7854, -50.80914)
                int ui:nodegraph:node:stackingOrder = 116
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @PaintedWorn/D04_PaintedWorn/D04_PaintedWorn_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 110
            }
        }

        def Material "PaintedWorn_D06"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/PaintedWorn/PaintedWorn_D06/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-112.73111, 172.3523)
            int ui:nodegraph:node:stackingOrder = 8
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (271.0003, 167.52812)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 115

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/PaintedWorn/PaintedWorn_D06/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/PaintedWorn/PaintedWorn_D06/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 0
                float3 inputs:normal.connect = </Root/PaintedWorn/PaintedWorn_D06/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/PaintedWorn/PaintedWorn_D06/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 114
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @PaintedWorn/D06_PaintedWorn/D06_PaintedWorn_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-604.3489, -482.86978)
                int ui:nodegraph:node:stackingOrder = 109
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @PaintedWorn/D06_PaintedWorn/D06_PaintedWorn_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 110
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @PaintedWorn/D06_PaintedWorn/D06_PaintedWorn_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 111
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @PaintedWorn/D06_PaintedWorn/D06_PaintedWorn_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 112
            }
        }

        def Material "PaintedWorn_D08"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/PaintedWorn/PaintedWorn_D08/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-92.73111, 192.3523)
            int ui:nodegraph:node:stackingOrder = 9
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/PaintedWorn/PaintedWorn_D08/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/PaintedWorn/PaintedWorn_D08/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 0
                float3 inputs:normal.connect = </Root/PaintedWorn/PaintedWorn_D08/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/PaintedWorn/PaintedWorn_D08/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 122
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @PaintedWorn/D08_PaintedWorn/D08_PaintedWorn_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-604.3489, -482.86978)
                int ui:nodegraph:node:stackingOrder = 115
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @PaintedWorn/D08_PaintedWorn/D08_PaintedWorn_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 118
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @PaintedWorn/D08_PaintedWorn/D08_PaintedWorn_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 120
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @PaintedWorn/D08_PaintedWorn/D08_PaintedWorn_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 121
            }
        }

        def Material "PaintedWorn_D10"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/PaintedWorn/PaintedWorn_D10/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-72.73111, 212.3523)
            int ui:nodegraph:node:stackingOrder = 10
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/PaintedWorn/PaintedWorn_D10/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/PaintedWorn/PaintedWorn_D10/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 0
                float3 inputs:normal.connect = </Root/PaintedWorn/PaintedWorn_D10/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/PaintedWorn/PaintedWorn_D10/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 125
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @PaintedWorn/D10_PaintedWorn/D10_PaintedWorn_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-604.3489, -482.86978)
                int ui:nodegraph:node:stackingOrder = 118
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @PaintedWorn/D10_PaintedWorn/D10_PaintedWorn_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 120
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @PaintedWorn/D10_PaintedWorn/D10_PaintedWorn_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 122
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @PaintedWorn/D10_PaintedWorn/D10_PaintedWorn_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 124
            }
        }

        def Material "PaintedWorn_D12"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/PaintedWorn/PaintedWorn_D12/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-52.73111, 232.3523)
            int ui:nodegraph:node:stackingOrder = 11
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/PaintedWorn/PaintedWorn_D12/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/PaintedWorn/PaintedWorn_D12/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 0
                float3 inputs:normal.connect = </Root/PaintedWorn/PaintedWorn_D12/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/PaintedWorn/PaintedWorn_D12/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 130
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @PaintedWorn/D12_PaintedWorn/D12_PaintedWorn_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-604.3489, -482.86978)
                int ui:nodegraph:node:stackingOrder = 123
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @PaintedWorn/D12_PaintedWorn/D12_PaintedWorn_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 125
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @PaintedWorn/D12_PaintedWorn/D12_PaintedWorn_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 127
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @PaintedWorn/D12_PaintedWorn/D12_PaintedWorn_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 128
            }
        }

        def Material "PaintedWorn_D20"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/PaintedWorn/PaintedWorn_D20/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-32.73111, 252.3523)
            int ui:nodegraph:node:stackingOrder = 12
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/PaintedWorn/PaintedWorn_D20/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/PaintedWorn/PaintedWorn_D20/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 0
                float3 inputs:normal.connect = </Root/PaintedWorn/PaintedWorn_D20/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/PaintedWorn/PaintedWorn_D20/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 136
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @PaintedWorn/D20_PaintedWorn/D20_PaintedWorn_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-604.3489, -482.86978)
                int ui:nodegraph:node:stackingOrder = 128
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @PaintedWorn/D20_PaintedWorn/D20_PaintedWorn_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 130
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @PaintedWorn/D20_PaintedWorn/D20_PaintedWorn_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 132
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @PaintedWorn/D20_PaintedWorn/D20_PaintedWorn_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 134
            }
        }
    }

    def Xform "Sapphire" (
        active = true
    )
    {
        reorder nameChildren = ["Sapphire_D04", "Sapphire_D06", "Sapphire_D08", "Sapphire_D100", "Sapphire_D12", "Sapphire_D20", "Sapphire_D10"]
        def Material "Sapphire_D04"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/Sapphire/Sapphire_D04/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-112.73111, 172.3523)
            int ui:nodegraph:node:stackingOrder = 8
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/Sapphire/Sapphire_D04/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/Sapphire/Sapphire_D04/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 0.9
                float inputs:metallic.connect = </Root/Sapphire/Sapphire_D04/Metalness.outputs:out>
                float3 inputs:normal.connect = </Root/Sapphire/Sapphire_D04/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/Sapphire/Sapphire_D04/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 95
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @Sapphire/D04_Sapphire/D04_Sapphire_baseColor.png@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-547.13434, -478.93372)
                int ui:nodegraph:node:stackingOrder = 192
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @Sapphire/D04_Sapphire/D04_Sapphire_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-285.50055, -208.26054)
                int ui:nodegraph:node:stackingOrder = 194
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Sapphire/D04_Sapphire/D04_Sapphire_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-548.68024, -47.484684)
                int ui:nodegraph:node:stackingOrder = 196
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file = @Sapphire/D04_Sapphire/D04_Sapphire_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-286.23093, 222.16682)
                int ui:nodegraph:node:stackingOrder = 198
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Sapphire/D04_Sapphire/D04_Sapphire_metallic.jpg@
                string inputs:filtertype
                float outputs:out
                float2 ui:nodegraph:node:pos = (-560.02814, 375.0529)
                int ui:nodegraph:node:stackingOrder = 204
            }
        }

        def Material "Sapphire_D06"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/Sapphire/Sapphire_D06/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-92.73111, 192.3523)
            int ui:nodegraph:node:stackingOrder = 9
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/Sapphire/Sapphire_D06/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/Sapphire/Sapphire_D06/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 0.9
                float inputs:metallic.connect = </Root/Sapphire/Sapphire_D06/Metalness.outputs:out>
                float3 inputs:normal.connect = </Root/Sapphire/Sapphire_D06/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/Sapphire/Sapphire_D06/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 95
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @Sapphire/D06_Sapphire/D06_Sapphire_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-616.62946, -477.75143)
                int ui:nodegraph:node:stackingOrder = 114
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @Sapphire/D06_Sapphire/D06_Sapphire_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 115
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Sapphire/D06_Sapphire/D06_Sapphire_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 116
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Sapphire/D06_Sapphire/D06_Sapphire_metallic.jpg@
                string inputs:filtertype
                float outputs:out
                float2 ui:nodegraph:node:pos = (-616.48145, 372.7364)
                int ui:nodegraph:node:stackingOrder = 118
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Sapphire/D06_Sapphire/D06_Sapphire_occlusion.jpg@
                string inputs:filtertype
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 119
            }
        }

        def Material "Sapphire_D08"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/Sapphire/Sapphire_D08/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-72.73111, 212.3523)
            int ui:nodegraph:node:stackingOrder = 10
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/Sapphire/Sapphire_D08/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/Sapphire/Sapphire_D08/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 0.9
                float inputs:metallic.connect = </Root/Sapphire/Sapphire_D08/Metalness.outputs:out>
                float3 inputs:normal.connect = </Root/Sapphire/Sapphire_D08/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/Sapphire/Sapphire_D08/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 95
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @Sapphire/D08_Sapphire/D08_Sapphire_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-616.62946, -477.75143)
                int ui:nodegraph:node:stackingOrder = 121
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @Sapphire/D08_Sapphire/D08_Sapphire_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 122
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Sapphire/D08_Sapphire/D08_Sapphire_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 124
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Sapphire/D08_Sapphire/D08_Sapphire_occlusion.jpg@
                string inputs:filtertype
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 125
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Sapphire/D08_Sapphire/D08_Sapphire_metallic.jpg@
                string inputs:filtertype
                float outputs:out
                float2 ui:nodegraph:node:pos = (-616.48145, 372.7364)
                int ui:nodegraph:node:stackingOrder = 127
            }
        }

        def Material "Sapphire_D100"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/Sapphire/Sapphire_D100/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-52.73111, 232.3523)
            int ui:nodegraph:node:stackingOrder = 11
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/Sapphire/Sapphire_D100/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/Sapphire/Sapphire_D100/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 0.9
                float inputs:metallic.connect = </Root/Sapphire/Sapphire_D100/Metalness.outputs:out>
                float3 inputs:normal.connect = </Root/Sapphire/Sapphire_D100/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/Sapphire/Sapphire_D100/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 95
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @Sapphire/D10_Sapphire/D10_Sapphire_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-616.62946, -477.75143)
                int ui:nodegraph:node:stackingOrder = 127
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @Sapphire/D10_Sapphire/D10_Sapphire_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 128
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Sapphire/D10_Sapphire/D10_Sapphire_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 129
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Sapphire/D10_Sapphire/D10_Sapphire_metallic.jpg@
                string inputs:filtertype
                float outputs:out
                float2 ui:nodegraph:node:pos = (-616.48145, 372.7364)
                int ui:nodegraph:node:stackingOrder = 132
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Sapphire/D10_Sapphire/D10_Sapphire_occlusion.jpg@
                string inputs:filtertype
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 133
            }
        }

        def Material "Sapphire_D12"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/Sapphire/Sapphire_D12/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-32.73111, 252.3523)
            int ui:nodegraph:node:stackingOrder = 12
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/Sapphire/Sapphire_D12/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/Sapphire/Sapphire_D12/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 0.9
                float inputs:metallic.connect = </Root/Sapphire/Sapphire_D12/Metalness.outputs:out>
                float3 inputs:normal.connect = </Root/Sapphire/Sapphire_D12/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/Sapphire/Sapphire_D12/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 95
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @Sapphire/D12_Sapphire/D12_Sapphire_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-616.62946, -477.75143)
                int ui:nodegraph:node:stackingOrder = 132
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @Sapphire/D12_Sapphire/D12_Sapphire_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 134
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Sapphire/D12_Sapphire/D12_Sapphire_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 135
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Sapphire/D12_Sapphire/D12_Sapphire_metallic.jpg@
                string inputs:filtertype
                float outputs:out
                float2 ui:nodegraph:node:pos = (-616.48145, 372.7364)
                int ui:nodegraph:node:stackingOrder = 136
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Sapphire/D12_Sapphire/D12_Sapphire_occlusion.jpg@
                string inputs:filtertype
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 138
            }
        }

        def Material "Sapphire_D20"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/Sapphire/Sapphire_D20/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-12.73111, 272.3523)
            int ui:nodegraph:node:stackingOrder = 13
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 166.41547)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 144

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/Sapphire/Sapphire_D20/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/Sapphire/Sapphire_D20/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 0.9
                float inputs:metallic.connect = </Root/Sapphire/Sapphire_D20/Metalness.outputs:out>
                float3 inputs:normal.connect = </Root/Sapphire/Sapphire_D20/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/Sapphire/Sapphire_D20/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 95
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @Sapphire/D20_Sapphire/D20_Sapphire_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-616.62946, -477.75143)
                int ui:nodegraph:node:stackingOrder = 137
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @Sapphire/D20_Sapphire/D20_Sapphire_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 138
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Sapphire/D20_Sapphire/D20_Sapphire_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 139
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Sapphire/D20_Sapphire/D20_Sapphire_metallic.jpg@
                string inputs:filtertype
                float outputs:out
                float2 ui:nodegraph:node:pos = (-616.48145, 372.7364)
                int ui:nodegraph:node:stackingOrder = 140
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Sapphire/D20_Sapphire/D20_Sapphire_occlusion.jpg@
                string inputs:filtertype
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 141
            }
        }

        def Material "Sapphire_D10"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/Sapphire/Sapphire_D10/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-32.73111, 252.3523)
            int ui:nodegraph:node:stackingOrder = 12
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/Sapphire/Sapphire_D10/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/Sapphire/Sapphire_D10/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 0.9
                float inputs:metallic.connect = </Root/Sapphire/Sapphire_D10/Metalness.outputs:out>
                float3 inputs:normal.connect = </Root/Sapphire/Sapphire_D10/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/Sapphire/Sapphire_D10/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 95
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @Sapphire/D100_Sapphire/D10_single_Sapphire_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-616.62946, -477.75143)
                int ui:nodegraph:node:stackingOrder = 135
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @Sapphire/D100_Sapphire/D10_single_Sapphire_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 136
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Sapphire/D100_Sapphire/D10_single_Sapphire_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 138
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Sapphire/D100_Sapphire/D10_single_Sapphire_metallic.jpg@
                string inputs:filtertype
                float outputs:out
                float2 ui:nodegraph:node:pos = (-616.48145, 372.7364)
                int ui:nodegraph:node:stackingOrder = 141
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @Sapphire/D100_Sapphire/D10_single_Sapphire_occlusion.jpg@
                string inputs:filtertype
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 140
            }
        }
    }

    def Xform "SteelDarkAged" (
        active = true
    )
    {
        reorder nameChildren = ["SteelDarkAged_D04", "SteelDarkAged_D06", "SteelDarkAged_D08", "SteelDarkAged_D10", "SteelDarkAged_D12", "SteelDarkAged_D20"]
        def Material "SteelDarkAged_D04"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/SteelDarkAged/SteelDarkAged_D04/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-92.73111, 192.3523)
            int ui:nodegraph:node:stackingOrder = 9
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/SteelDarkAged/SteelDarkAged_D04/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/SteelDarkAged/SteelDarkAged_D04/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor.connect = </Root/SteelDarkAged/SteelDarkAged_D04/Emissive.outputs:out>
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 1
                float inputs:metallic.connect = </Root/SteelDarkAged/SteelDarkAged_D04/Metalness.outputs:out>
                float3 inputs:normal.connect = </Root/SteelDarkAged/SteelDarkAged_D04/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness = 0.3
                float inputs:roughness.connect = None
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 161
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @SteelDarkAgedPink/D04_SteelDarkAgedPink_damaged/D04_SteelDarkAged_metallic.jpg@
                string inputs:filtertype
                float outputs:out
                float2 ui:nodegraph:node:pos = (-845.2131, 52.730865)
                int ui:nodegraph:node:stackingOrder = 124
            }

            def Shader "Emissive"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @SteelDarkAgedPink/D04_SteelDarkAgedPink_damaged/D04_SteelDarkAged_emissive.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-591.6595, 220.39871)
                int ui:nodegraph:node:stackingOrder = 167
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @SteelDarkAgedPink/D04_SteelDarkAgedPink_damaged/D04_SteelDarkAged_occlusion.jpg@
                string inputs:filtertype
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 131
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @SteelDarkAgedPink/D04_SteelDarkAgedPink_damaged/D04_SteelDarkAged_normal.png@
                string inputs:filtertype
                string inputs:uaddressmode
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 133
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @SteelDarkAgedPink/D04_SteelDarkAgedPink_damaged/D04_SteelDarkAged_baseColor.png@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-592.28485, -203.1374)
                int ui:nodegraph:node:stackingOrder = 165
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }
        }

        def Material "SteelDarkAged_D06"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/SteelDarkAged/SteelDarkAged_D06/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-72.73111, 212.3523)
            int ui:nodegraph:node:stackingOrder = 10
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/SteelDarkAged/SteelDarkAged_D06/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/SteelDarkAged/SteelDarkAged_D06/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor.connect = </Root/SteelDarkAged/SteelDarkAged_D06/Emissive.outputs:out>
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 1
                float inputs:metallic.connect = </Root/SteelDarkAged/SteelDarkAged_D06/Metalness.outputs:out>
                float3 inputs:normal.connect = </Root/SteelDarkAged/SteelDarkAged_D06/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/SteelDarkAged/SteelDarkAged_D06/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 116
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @SteelDarkAgedPink/D06_SteelDarkAgedPink_damaged/D06_SteelDarkAged_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-618.0699, -468.41434)
                int ui:nodegraph:node:stackingOrder = 125
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @SteelDarkAgedPink/D06_SteelDarkAgedPink_damaged/D06_SteelDarkAged_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 126
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @SteelDarkAgedPink/D06_SteelDarkAgedPink_damaged/D06_SteelDarkAged_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 127
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file = @SteelDarkAgedPink/D06_SteelDarkAgedPink_damaged/D06_SteelDarkAged_roughness.jpg@
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 128
            }

            def Shader "Emissive"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @SteelDarkAgedPink/D06_SteelDarkAgedPink_damaged/D06_SteelDarkAged_emissive.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-619.425, 362.95517)
                int ui:nodegraph:node:stackingOrder = 129
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @SteelDarkAgedPink/D06_SteelDarkAgedPink_damaged/D06_SteelDarkAged_metallic.jpg@
                string inputs:filtertype
                float outputs:out
                float2 ui:nodegraph:node:pos = (-896.76306, 91.74946)
                int ui:nodegraph:node:stackingOrder = 131
            }
        }

        def Material "SteelDarkAged_D08"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/SteelDarkAged/SteelDarkAged_D08/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-52.73111, 232.3523)
            int ui:nodegraph:node:stackingOrder = 11
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/SteelDarkAged/SteelDarkAged_D08/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/SteelDarkAged/SteelDarkAged_D08/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor.connect = </Root/SteelDarkAged/SteelDarkAged_D08/Emissive.outputs:out>
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 1
                float inputs:metallic.connect = </Root/SteelDarkAged/SteelDarkAged_D08/Metalness.outputs:out>
                float3 inputs:normal.connect = </Root/SteelDarkAged/SteelDarkAged_D08/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/SteelDarkAged/SteelDarkAged_D08/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 116
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @SteelDarkAgedPink/D08_SteelDarkAgedPink_damaged/D08_SteelDarkAged_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-618.0699, -468.41434)
                int ui:nodegraph:node:stackingOrder = 135
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @SteelDarkAgedPink/D08_SteelDarkAgedPink_damaged/D08_SteelDarkAged_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 136
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file = @SteelDarkAgedPink/D08_SteelDarkAgedPink_damaged/D08_SteelDarkAged_roughness.jpg@
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 137
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @SteelDarkAgedPink/D08_SteelDarkAgedPink_damaged/D08_SteelDarkAged_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 138
            }

            def Shader "Emissive"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @SteelDarkAgedPink/D08_SteelDarkAgedPink_damaged/D08_SteelDarkAged_emissive.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-619.425, 362.95517)
                int ui:nodegraph:node:stackingOrder = 139
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @SteelDarkAgedPink/D08_SteelDarkAgedPink_damaged/D08_SteelDarkAged_metallic.jpg@
                string inputs:filtertype
                float outputs:out
                float2 ui:nodegraph:node:pos = (-851.6801, 73.348915)
                int ui:nodegraph:node:stackingOrder = 140
            }
        }

        def Material "SteelDarkAged_D10"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/SteelDarkAged/SteelDarkAged_D10/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-32.73111, 252.3523)
            int ui:nodegraph:node:stackingOrder = 12
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/SteelDarkAged/SteelDarkAged_D10/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/SteelDarkAged/SteelDarkAged_D10/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor.connect = </Root/SteelDarkAged/SteelDarkAged_D10/Emissive.outputs:out>
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 1
                float inputs:metallic.connect = </Root/SteelDarkAged/SteelDarkAged_D10/Metalness.outputs:out>
                float3 inputs:normal.connect = </Root/SteelDarkAged/SteelDarkAged_D10/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/SteelDarkAged/SteelDarkAged_D10/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 116
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @SteelDarkAgedPink/D10_SteelDarkAgedPink_damaged/D10_SteelDarkAged_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-618.0699, -468.41434)
                int ui:nodegraph:node:stackingOrder = 146
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @SteelDarkAgedPink/D10_SteelDarkAgedPink_damaged/D10_SteelDarkAged_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 147
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @SteelDarkAgedPink/D10_SteelDarkAgedPink_damaged/D10_SteelDarkAged_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 148
            }

            def Shader "Emissive"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @SteelDarkAgedPink/D10_SteelDarkAgedPink_damaged/D10_SteelDarkAged_emissive.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-619.425, 362.95517)
                int ui:nodegraph:node:stackingOrder = 150
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @SteelDarkAgedPink/D10_SteelDarkAgedPink_damaged/D10_SteelDarkAged_metallic.jpg@
                string inputs:filtertype
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-848.78906, 152.0641)
                int ui:nodegraph:node:stackingOrder = 151
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @SteelDarkAgedPink/D10_SteelDarkAgedPink_damaged/D10_SteelDarkAged_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 152
            }
        }

        def Material "SteelDarkAged_D12"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/SteelDarkAged/SteelDarkAged_D12/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-12.73111, 272.3523)
            int ui:nodegraph:node:stackingOrder = 13
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/SteelDarkAged/SteelDarkAged_D12/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/SteelDarkAged/SteelDarkAged_D12/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor.connect = </Root/SteelDarkAged/SteelDarkAged_D12/Emissive.outputs:out>
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 1
                float inputs:metallic.connect = </Root/SteelDarkAged/SteelDarkAged_D12/Metalness.outputs:out>
                float3 inputs:normal.connect = </Root/SteelDarkAged/SteelDarkAged_D12/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/SteelDarkAged/SteelDarkAged_D12/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 116
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @SteelDarkAgedPink/D12_SteelDarkAgedPind_damaged/D12_SteelDarkAged_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-618.0699, -468.41434)
                int ui:nodegraph:node:stackingOrder = 153
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @SteelDarkAgedPink/D12_SteelDarkAgedPind_damaged/D12_SteelDarkAged_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 154
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @SteelDarkAgedPink/D12_SteelDarkAgedPind_damaged/D12_SteelDarkAged_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 157
            }

            def Shader "Emissive"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @SteelDarkAgedPink/D12_SteelDarkAgedPind_damaged/D12_SteelDarkAged_emissive.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-619.425, 362.95517)
                int ui:nodegraph:node:stackingOrder = 156
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @SteelDarkAgedPink/D12_SteelDarkAgedPind_damaged/D12_SteelDarkAged_metallic.jpg@
                string inputs:filtertype
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-848.78906, 152.0641)
                int ui:nodegraph:node:stackingOrder = 158
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @SteelDarkAgedPink/D12_SteelDarkAgedPind_damaged/D12_SteelDarkAged_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 155
            }
        }

        def Material "SteelDarkAged_D20"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/SteelDarkAged/SteelDarkAged_D20/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (7.2688904, 292.3523)
            int ui:nodegraph:node:stackingOrder = 14
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/SteelDarkAged/SteelDarkAged_D20/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/SteelDarkAged/SteelDarkAged_D20/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor.connect = </Root/SteelDarkAged/SteelDarkAged_D20/Emissive.outputs:out>
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 1
                float inputs:metallic.connect = </Root/SteelDarkAged/SteelDarkAged_D20/Metalness.outputs:out>
                float3 inputs:normal.connect = </Root/SteelDarkAged/SteelDarkAged_D20/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/SteelDarkAged/SteelDarkAged_D20/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 116
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @SteelDarkAgedPink/D20_SteelDarkAgedPink_damaged/D20_SteelDark_Pink_damaged_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-618.0699, -468.41434)
                int ui:nodegraph:node:stackingOrder = 159
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @SteelDarkAgedPink/D20_SteelDarkAgedPink_damaged/D20_SteelDark_Pink_damaged_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 160
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @SteelDarkAgedPink/D20_SteelDarkAgedPink_damaged/D20_SteelDark_Pink_damaged_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 166
            }

            def Shader "Emissive"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @SteelDarkAgedPink/D20_SteelDarkAgedPink_damaged/D20_SteelDark_Pink_damaged_emissive.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-619.425, 362.95517)
                int ui:nodegraph:node:stackingOrder = 164
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @SteelDarkAgedPink/D20_SteelDarkAgedPink_damaged/D20_SteelDark_Pink_damaged_metallic.jpg@
                string inputs:filtertype
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-848.78906, 152.0641)
                int ui:nodegraph:node:stackingOrder = 163
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @SteelDarkAgedPink/D20_SteelDarkAgedPink_damaged/D20_SteelDark_Pink_damaged_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 165
            }
        }
    }

    def Xform "BlueEdge" (
        active = true
    )
    {
        reorder nameChildren = ["BlueEdge_D04", "BlueEdge_D06", "BlueEdge_D08", "BlueEdge_D10", "BlueEdge_D12", "BlueEdge_D20"]
        def Material "BlueEdge_D04"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/BlueEdge/BlueEdge_D04/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-72.73111, 212.3523)
            int ui:nodegraph:node:stackingOrder = 10
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/BlueEdge/BlueEdge_D04/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/BlueEdge/BlueEdge_D04/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor.connect = </Root/BlueEdge/BlueEdge_D04/Emissive.outputs:out>
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 1
                float inputs:metallic.connect = </Root/BlueEdge/BlueEdge_D04/Metalness.outputs:out>
                float3 inputs:normal.connect = </Root/BlueEdge/BlueEdge_D04/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/BlueEdge/BlueEdge_D04/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 116
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @BlueEdge/D04_BlueEdge/D04_BlueEdge_metallic.jpg@
                string inputs:filtertype
                float outputs:out
                float2 ui:nodegraph:node:pos = (-845.2131, 52.730865)
                int ui:nodegraph:node:stackingOrder = 146
            }

            def Shader "Emissive"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @BlueEdge/D04_BlueEdge/D04_BlueEdge_emissive.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-619.8268, 367.86023)
                int ui:nodegraph:node:stackingOrder = 148
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @BlueEdge/D04_BlueEdge/D04_BlueEdge_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 153
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @BlueEdge/D04_BlueEdge/D04_BlueEdge_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 137
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file = @BlueEdge/D04_BlueEdge/D04_BlueEdge_roughness.jpg@
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 143
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @BlueEdge/D04_BlueEdge/D04_BlueEdge_baseColor.png@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-618.0699, -468.41434)
                int ui:nodegraph:node:stackingOrder = 141
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }
        }

        def Material "BlueEdge_D06"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/BlueEdge/BlueEdge_D06/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-52.73111, 232.3523)
            int ui:nodegraph:node:stackingOrder = 11
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/BlueEdge/BlueEdge_D06/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/BlueEdge/BlueEdge_D06/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor.connect = </Root/BlueEdge/BlueEdge_D06/Emissive.outputs:out>
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 1
                float inputs:metallic.connect = </Root/BlueEdge/BlueEdge_D06/Metalness.outputs:out>
                float3 inputs:normal.connect = </Root/BlueEdge/BlueEdge_D06/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/BlueEdge/BlueEdge_D06/Roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 116
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @BlueEdge/D06_BlueEdge/D06_BlueEdge_metallic.jpg@
                string inputs:filtertype
                float outputs:out
                float2 ui:nodegraph:node:pos = (-845.2131, 52.730865)
                int ui:nodegraph:node:stackingOrder = 161
            }

            def Shader "Emissive"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @BlueEdge/D06_BlueEdge/D06_BlueEdge_emissive.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-619.8268, 367.86023)
                int ui:nodegraph:node:stackingOrder = 159
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @BlueEdge/D06_BlueEdge/D06_BlueEdge_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 158
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @BlueEdge/D06_BlueEdge/D06_BlueEdge_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 154
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file = @BlueEdge/D06_BlueEdge/D06_BlueEdge_roughness.jpg@
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 160
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @BlueEdge/D06_BlueEdge/D06_BlueEdge_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-618.0699, -468.41434)
                int ui:nodegraph:node:stackingOrder = 155
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }
        }

        def Material "BlueEdge_D08"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/BlueEdge/BlueEdge_D08/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-32.73111, 252.3523)
            int ui:nodegraph:node:stackingOrder = 12
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/BlueEdge/BlueEdge_D08/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/BlueEdge/BlueEdge_D08/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor.connect = </Root/BlueEdge/BlueEdge_D08/Emissive.outputs:out>
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 1
                float inputs:metallic.connect = </Root/BlueEdge/BlueEdge_D08/Metalness.outputs:out>
                float3 inputs:normal.connect = </Root/BlueEdge/BlueEdge_D08/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/BlueEdge/BlueEdge_D08/Roughness.outputs:out>
                float inputs:specular = 0
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 173
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @BlueEdge/D08_BlueEdge/D08_BlueEdge_metallic.jpg@
                string inputs:filtertype
                float outputs:out
                float2 ui:nodegraph:node:pos = (-845.2131, 52.730865)
                int ui:nodegraph:node:stackingOrder = 168
            }

            def Shader "Emissive"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @BlueEdge/D08_BlueEdge/D08_BlueEdge_emissive.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-619.8268, 367.86023)
                int ui:nodegraph:node:stackingOrder = 166
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @BlueEdge/D08_BlueEdge/D08_BlueEdge_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 165
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @BlueEdge/D08_BlueEdge/D08_BlueEdge_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 163
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file = @BlueEdge/D08_BlueEdge/D08_BlueEdge_roughness.jpg@
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 164
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @BlueEdge/D08_BlueEdge/D08_BlueEdge_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-618.0699, -468.41434)
                int ui:nodegraph:node:stackingOrder = 162
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }
        }

        def Material "BlueEdge_D10"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/BlueEdge/BlueEdge_D10/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (-12.73111, 272.3523)
            int ui:nodegraph:node:stackingOrder = 13
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/BlueEdge/BlueEdge_D10/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/BlueEdge/BlueEdge_D10/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor.connect = </Root/BlueEdge/BlueEdge_D10/Emissive.outputs:out>
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 1
                float inputs:metallic.connect = </Root/BlueEdge/BlueEdge_D10/Metalness.outputs:out>
                float3 inputs:normal.connect = </Root/BlueEdge/BlueEdge_D10/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/BlueEdge/BlueEdge_D10/Roughness.outputs:out>
                float inputs:specular = 0
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 173
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @BlueEdge/D10_BlueEdge/D10_BlueEdge_metallic.jpg@
                string inputs:filtertype
                float outputs:out
                float2 ui:nodegraph:node:pos = (-845.2131, 52.730865)
                int ui:nodegraph:node:stackingOrder = 185
            }

            def Shader "Emissive"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @BlueEdge/D10_BlueEdge/D10_BlueEdge_emissive.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-619.8268, 367.86023)
                int ui:nodegraph:node:stackingOrder = 182
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @BlueEdge/D10_BlueEdge/D10_BlueEdge_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 180
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @BlueEdge/D10_BlueEdge/D10_BlueEdge_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 177
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file = @BlueEdge/D10_BlueEdge/D10_BlueEdge_roughness.jpg@
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 184
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @BlueEdge/D10_BlueEdge/D10_BlueEdge_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-618.0699, -468.41434)
                int ui:nodegraph:node:stackingOrder = 175
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }
        }

        def Material "BlueEdge_D12"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/BlueEdge/BlueEdge_D12/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (7.2688904, 292.3523)
            int ui:nodegraph:node:stackingOrder = 14
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/BlueEdge/BlueEdge_D12/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/BlueEdge/BlueEdge_D12/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor.connect = </Root/BlueEdge/BlueEdge_D12/Emissive.outputs:out>
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 1
                float inputs:metallic.connect = </Root/BlueEdge/BlueEdge_D12/Metalness.outputs:out>
                float3 inputs:normal.connect = </Root/BlueEdge/BlueEdge_D12/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/BlueEdge/BlueEdge_D12/Roughness.outputs:out>
                float inputs:specular = 0
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 173
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @BlueEdge/D12_BlueEdge/D12_Blue_Edge_metallic.jpg@
                string inputs:filtertype
                float outputs:out
                float2 ui:nodegraph:node:pos = (-845.2131, 52.730865)
                int ui:nodegraph:node:stackingOrder = 191
            }

            def Shader "Emissive"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @BlueEdge/D12_BlueEdge/D12_Blue_Edge_emissive.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-619.8268, 367.86023)
                int ui:nodegraph:node:stackingOrder = 190
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @BlueEdge/D12_BlueEdge/D12_Blue_Edge_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 188
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @BlueEdge/D12_BlueEdge/D12_Blue_Edge_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 187
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file = @BlueEdge/D12_BlueEdge/D12_Blue_Edge_roughness.jpg@
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 189
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @BlueEdge/D12_BlueEdge/D12_Blue_Edge_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-618.0699, -468.41434)
                int ui:nodegraph:node:stackingOrder = 186
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }
        }

        def Material "BlueEdge_D20"
        {
            reorder nameChildren = ["PBRSurface", "Image", "Image_1", "Image_2", "Image_3", "Clouds_D20"]
            token outputs:mtlx:surface.connect = </Root/BlueEdge/BlueEdge_D20/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:node:pos = (27.26889, 312.3523)
            int ui:nodegraph:node:stackingOrder = 15
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (273.74237, 169.82535)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 62

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/BlueEdge/BlueEdge_D20/AO.outputs:out>
                color3f inputs:baseColor.connect = </Root/BlueEdge/BlueEdge_D20/BaseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor.connect = </Root/BlueEdge/BlueEdge_D20/Emissive.outputs:out>
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic = 1
                float inputs:metallic.connect = </Root/BlueEdge/BlueEdge_D20/Metalness.outputs:out>
                float3 inputs:normal.connect = </Root/BlueEdge/BlueEdge_D20/Normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/BlueEdge/BlueEdge_D20/Roughness.outputs:out>
                float inputs:specular = 0
                token outputs:out
                float2 ui:nodegraph:node:pos = (2.6960206, 41.030357)
                int ui:nodegraph:node:stackingOrder = 173
            }

            def Shader "Metalness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @BlueEdge/D20_BlueEdge/D20_BlueEdge_metallic.jpg@
                string inputs:filtertype
                float outputs:out
                float2 ui:nodegraph:node:pos = (-845.2131, 52.730865)
                int ui:nodegraph:node:stackingOrder = 198
            }

            def Shader "Emissive"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @BlueEdge/D20_BlueEdge/D20_BlueEdge_emissive.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-619.8268, 367.86023)
                int ui:nodegraph:node:stackingOrder = 196
            }

            def Shader "AO"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @BlueEdge/D20_BlueEdge/D20_BlueEdge_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-347.30594, 226.72006)
                int ui:nodegraph:node:stackingOrder = 195
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @BlueEdge/D20_BlueEdge/D20_BlueEdge_normal.png@
                string inputs:filtertype
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-352.4828, -204.79681)
                int ui:nodegraph:node:stackingOrder = 193
            }

            def Shader "Roughness"
            {
                uniform token info:id = "ND_image_float"
                float inputs:default
                asset inputs:file = @BlueEdge/D20_BlueEdge/D20_BlueEdge_roughness.jpg@
                string inputs:filtertype
                float2 inputs:texcoord
                string inputs:uaddressmode
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-617.57697, -51.924557)
                int ui:nodegraph:node:stackingOrder = 194
            }

            def Shader "BaseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @BlueEdge/D20_BlueEdge/D20_BlueEdge_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-618.0699, -468.41434)
                int ui:nodegraph:node:stackingOrder = 192
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }
        }
    }

    def Xform "TraySkins" (
        active = true
    )
    {
        reorder nameChildren = ["woodAcajou_tray", "boneStylized_tray", "bronzeArmor_tray", "carbonFiber_tray", "clayTerracotta_tray", "creatureSkinGreen_tray", "fabricWoolJersey_tray", "leatherCalfGrain_tray", "leatheretteDamaged_tray", "leatherGrain_tray", "leatherSofa_tray", "leatherStylized_tray", "marbleFineWhite_tray", "marblePolished_tray", "marbleVeined_tray", "marbleVerdiAlpi_tray", "metalCyborg_tray", "paintBrushed_tray", "paintRoll_tray", "plasticComposite_tray", "plasticUsed_tray", "plasticUsedSoft_tray", "rubberDry_tray", "rubberRaw_tray", "steelDarkAged_tray", "fabricWoolHerringbone_tray", "leatherWeathered_tray", "steelScratched_tray", "stoneTravertine_tray", "stylizedWoodPlain_tray", "terazzoComposite_tray", "woodPlain_tray"]
        def Material "woodAcajou_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/woodAcajou_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/TraySkins/woodAcajou_tray/UsdPreviewSurface.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/woodAcajou_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/woodAcajou_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/woodAcajou_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/woodAcajou_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/woodAcajou_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 89
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:baseColor"]
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/woodAcajou/M_woodAcajou_baseColor.jpg@ (
                    colorSpace = "srgb_texture"
                )
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 91
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:default"]
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/woodAcajou/M_woodAcajou_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 65
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/woodAcajou/M_woodAcajou_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-520.1284, 391.8576)
                int ui:nodegraph:node:stackingOrder = 80
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/woodAcajou/M_woodAcajou_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 94
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/woodAcajou/M_woodAcajou_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-247.48308, 319.52206)
                int ui:nodegraph:node:stackingOrder = 82
            }
        }

        def Material "boneStylized_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/boneStylized_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (-116.17813, 237.64055)
            int ui:nodegraph:node:stackingOrder = 1
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/boneStylized_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/boneStylized_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/boneStylized_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/boneStylized_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/boneStylized_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (277.57547, 138.64284)
                int ui:nodegraph:node:stackingOrder = 89
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/boneStylized/M_boneStylized_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 78
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/boneStylized/M_boneStylized_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 79
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/boneStylized/M_boneStylized_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 87
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/boneStylized/M_boneStylized_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 82
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/boneStylized/M_boneStylized_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 84
            }
        }

        def Material "bronzeArmor_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/bronzeArmor_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (219.79866, 101.92959)
            int ui:nodegraph:node:stackingOrder = 1
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/bronzeArmor_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/bronzeArmor_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/bronzeArmor_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/bronzeArmor_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/bronzeArmor_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/bronzeArmor/M_bronzeArmor_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 90
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/bronzeArmor/M_bronzeArmor_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 91
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/bronzeArmor/M_bronzeArmor_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 95
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/bronzeArmor/M_bronzeArmor_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 92
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/bronzeArmor/M_bronzeArmor_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 94
            }
        }

        def Material "carbonFiber_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/carbonFiber_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (239.79866, 121.92959)
            int ui:nodegraph:node:stackingOrder = 2
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/carbonFiber_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/carbonFiber_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/carbonFiber_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/carbonFiber_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/carbonFiber_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/carbonFiber/M_carbonFiber_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 96
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/carbonFiber/M_carbonFiber_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 98
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/carbonFiber/M_carbonFiber_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 104
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/carbonFiber/M_carbonFiber_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 100
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/carbonFiber/M_carbonFiber_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 101
            }
        }

        def Material "clayTerracotta_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/clayTerracotta_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (259.79865, 141.9296)
            int ui:nodegraph:node:stackingOrder = 3
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/clayTerracotta_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/clayTerracotta_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/clayTerracotta_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/clayTerracotta_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/clayTerracotta_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/clayTerracotta/M_clayTerracotta_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 96
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/clayTerracotta/M_clayTerracotta_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 98
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/clayTerracotta/M_clayTerracotta_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 104
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/clayTerracotta/M_clayTerracotta_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 100
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/clayTerracotta/M_clayTerracotta_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 102
            }
        }

        def Material "creatureSkinGreen_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/creatureSkinGreen_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (279.79865, 161.9296)
            int ui:nodegraph:node:stackingOrder = 4
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/creatureSkinGreen_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/creatureSkinGreen_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/creatureSkinGreen_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/creatureSkinGreen_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/creatureSkinGreen_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/creatureSkinGreen/M_creatureSkinGreen_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 96
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/clayTerracotta/M_clayTerracotta_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 97
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/creatureSkinGreen/M_creatureSkinGreen_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 100
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/clayTerracotta/M_clayTerracotta_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 98
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/creatureSkinGreen/M_creatureSkinGreen_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 99
            }
        }

        def Material "fabricWoolJersey_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/fabricWoolJersey_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (299.79865, 181.9296)
            int ui:nodegraph:node:stackingOrder = 5
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/fabricWoolJersey_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/fabricWoolJersey_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/fabricWoolJersey_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/fabricWoolJersey_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/fabricWoolJersey_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/fabricWoolJersey/M_fabricWoolJersey_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 108
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/fabricWoolJersey/M_fabricWoolJersey_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 109
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/fabricWoolJersey/M_fabricWoolJersey_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 112
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/fabricWoolJersey/M_fabricWoolJersey_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 113
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/fabricWoolJersey/M_fabricWoolJersey_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 111
            }
        }

        def Material "leatherCalfGrain_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/leatherCalfGrain_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (319.79865, 201.9296)
            int ui:nodegraph:node:stackingOrder = 6
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/leatherCalfGrain_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/leatherCalfGrain_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/leatherCalfGrain_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/leatherCalfGrain_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/leatherCalfGrain_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/leatherCalfGrain/M_leatherCalfGrain_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 101
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/leatherCalfGrain/M_leatherCalfGrain_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 103
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/leatherCalfGrain/M_leatherCalfGrain_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 117
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/leatherCalfGrain/M_leatherCalfGrain_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 115
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/leatherCalfGrain/M_leatherCalfGrain_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 116
            }
        }

        def Material "leatheretteDamaged_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/leatheretteDamaged_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (319.79865, 201.9296)
            int ui:nodegraph:node:stackingOrder = 6
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/leatheretteDamaged_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/leatheretteDamaged_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/leatheretteDamaged_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/leatheretteDamaged_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/leatheretteDamaged_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/leatheretteDamaged/M_leatheretteDamaged_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 101
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/leatheretteDamaged/M_leatheretteDamaged_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 103
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/leatheretteDamaged/M_leatheretteDamaged_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 107
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/leatheretteDamaged/M_leatheretteDamaged_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 105
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/leatheretteDamaged/M_leatheretteDamaged_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 106
            }
        }

        def Material "leatherGrain_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/leatherGrain_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (319.79865, 201.9296)
            int ui:nodegraph:node:stackingOrder = 6
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/leatherGrain_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/leatherGrain_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/leatherGrain_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/leatherGrain_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/leatherGrain_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/leatherGrain/M_leatherGrain_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 101
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/leatherGrain/M_leatherGrain_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 103
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/leatherGrain/M_leatherGrain_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 108
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/leatherGrain/M_leatherGrain_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 105
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/leatherGrain/M_leatherGrain_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 106
            }
        }

        def Material "leatherSofa_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/leatherSofa_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (319.79865, 201.9296)
            int ui:nodegraph:node:stackingOrder = 6
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/leatherSofa_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/leatherSofa_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/leatherSofa_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/leatherSofa_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/leatherSofa_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/leatherSofa/M_leatherSofa_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 101
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/leatherSofa/M_leatherSofa_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 105
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/leatherSofa/M_leatherSofa_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 110
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/leatherSofa/M_leatherSofa_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 108
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/leatherSofa/M_leatherSofa_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 109
            }
        }

        def Material "leatherStylized_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/leatherStylized_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (319.79865, 201.9296)
            int ui:nodegraph:node:stackingOrder = 6
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/leatherStylized_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/leatherStylized_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/leatherStylized_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/leatherStylized_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/leatherStylized_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/leatherStylized/M_leatherStylized_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 101
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/leatherStylized/M_leatherStylized_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 103
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/leatherStylized/M_leatherStylized_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 107
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/leatherStylized/M_leatherStylized_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 105
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/leatherStylized/M_leatherStylized_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 106
            }
        }

        def Material "marbleFineWhite_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/marbleFineWhite_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (319.79865, 201.9296)
            int ui:nodegraph:node:stackingOrder = 6
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/marbleFineWhite_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/marbleFineWhite_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/marbleFineWhite_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/marbleFineWhite_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/marbleFineWhite_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/marbleFineWhite/M_marbleFineWhite_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 101
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/marbleFineWhite/M_marbleFineWhite_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 103
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/marbleFineWhite/M_marbleFineWhite_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 107
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/marbleFineWhite/M_marbleFineWhite_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 105
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/marbleFineWhite/M_marbleFineWhite_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 106
            }
        }

        def Material "marblePolished_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/marblePolished_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (339.79865, 221.9296)
            int ui:nodegraph:node:stackingOrder = 7
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/marblePolished_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/marblePolished_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/marblePolished_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/marblePolished_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/marblePolished_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/marblePolished/M_marblePolished_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 101
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/marblePolished/M_marblePolished_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 102
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/marblePolished/M_marblePolished_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 106
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/marblePolished/M_marblePolished_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 104
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/marblePolished/M_marblePolished_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 105
            }
        }

        def Material "marbleVeined_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/marbleVeined_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (339.79865, 221.9296)
            int ui:nodegraph:node:stackingOrder = 7
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/marbleVeined_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/marbleVeined_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/marbleVeined_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/marbleVeined_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/marbleVeined_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/marbleVeined/M_marbleVeined_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 101
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/marbleVeined/M_marbleVeined_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 103
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/marbleVeined/M_marbleVeined_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 107
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/marbleVeined/M_marbleVeined_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 105
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/marbleVeined/M_marbleVeined_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 106
            }
        }

        def Material "marbleVerdiAlpi_tray"
        {
            reorder nameChildren = ["UsdPreviewSurface", "PBRSurface", "baseColor", "normal", "roughness", "metallic", "occlusion", "metalCyborg_tray"]
            token outputs:mtlx:surface.connect = </Root/TraySkins/marbleVerdiAlpi_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (339.79865, 221.9296)
            int ui:nodegraph:node:stackingOrder = 7
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/marbleVerdiAlpi_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/marbleVerdiAlpi_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/marbleVerdiAlpi_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/marbleVerdiAlpi_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/marbleVerdiAlpi_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/marbleVerdiAlpi/M_marbleVerdiAlpi_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 101
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/marbleVerdiAlpi/M_marbleVerdiAlpi_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 102
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/marbleVerdiAlpi/M_marbleVerdiAlpi_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 106
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/marbleVerdiAlpi/M_marbleVerdiAlpi_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 104
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/marbleVerdiAlpi/M_marbleVerdiAlpi_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 105
            }
        }

        def Material "metalCyborg_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/metalCyborg_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (339.79865, 221.9296)
            int ui:nodegraph:node:stackingOrder = 7
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/metalCyborg_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/metalCyborg_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/metalCyborg_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/metalCyborg_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/metalCyborg_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/metalCyborg/M_metalCyborg_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 101
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/metalCyborg/M_metalCyborg_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 103
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/metalCyborg/M_metalCyborg_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 106
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/metalCyborg/M_metalCyborg_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 104
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/metalCyborg/M_metalCyborg_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 105
            }
        }

        def Material "paintBrushed_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/paintBrushed_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (339.79865, 221.9296)
            int ui:nodegraph:node:stackingOrder = 7
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/paintBrushed_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/paintBrushed_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/paintBrushed_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/paintBrushed_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/paintBrushed_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/paintBrushed/M_paintBrushed_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 101
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/paintBrushed/M_paintBrushed_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 102
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/paintBrushed/M_paintBrushed_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 129
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/paintBrushed/M_paintBrushed_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 104
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/paintBrushed/M_paintBrushed_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 105
            }
        }

        def Material "paintRoll_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/paintRoll_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (339.79865, 221.9296)
            int ui:nodegraph:node:stackingOrder = 7
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/paintRoll_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/paintRoll_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/paintRoll_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/paintRoll_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/paintRoll_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/paintRoll/M_paintRoll_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 101
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/paintRoll/M_paintRoll_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 102
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/paintRoll/M_paintRoll_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 107
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/paintRoll/M_paintRoll_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 105
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/paintRoll/M_paintRoll_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 106
            }
        }

        def Material "plasticComposite_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/plasticComposite_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (339.79865, 221.9296)
            int ui:nodegraph:node:stackingOrder = 7
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/plasticComposite_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/plasticComposite_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/plasticComposite_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/plasticComposite_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/plasticComposite_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/plasticComposite/M_plasticComposite_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 102
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/plasticComposite/M_plasticComposite_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 103
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/plasticComposite/M_plasticComposite_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 107
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/plasticComposite/M_plasticComposite_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 104
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/plasticComposite/M_plasticComposite_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 105
            }
        }

        def Material "plasticUsed_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/plasticUsed_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (339.79865, 221.9296)
            int ui:nodegraph:node:stackingOrder = 7
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/plasticUsed_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/plasticUsed_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/plasticUsed_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/plasticUsed_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/plasticUsed_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/plasticUsed/M_plasticUsed_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 101
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/plasticUsed/M_plasticUsed_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 102
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/plasticUsed/M_plasticUsed_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 105
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/plasticUsed/M_plasticUsed_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 103
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/plasticUsed/M_plasticUsed_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 104
            }
        }

        def Material "plasticUsedSoft_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/plasticUsedSoft_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (339.79865, 221.9296)
            int ui:nodegraph:node:stackingOrder = 7
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/plasticUsedSoft_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/plasticUsedSoft_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/plasticUsedSoft_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/plasticUsedSoft_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/plasticUsedSoft_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/plasticUsedSoft/M_plasticUsedSoft_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 101
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/plasticUsedSoft/M_plasticUsedSoft_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 102
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/plasticUsedSoft/M_plasticUsedSoft_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 106
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/plasticUsedSoft/M_plasticUsedSoft_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 104
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/plasticUsedSoft/M_plasticUsedSoft_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 105
            }
        }

        def Material "rubberDry_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/rubberDry_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (339.79865, 221.9296)
            int ui:nodegraph:node:stackingOrder = 7
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/rubberDry_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/rubberDry_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/rubberDry_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/rubberDry_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/rubberDry_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/rubberDry/M_rubberDry_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 101
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/rubberDry/M_rubberDry_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 102
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/rubberDry/M_rubberDry_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 105
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/rubberDry/M_rubberDry_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 103
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/rubberDry/M_rubberDry_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 104
            }
        }

        def Material "rubberRaw_tray"
        {
            reorder nameChildren = ["UsdPreviewSurface", "PBRSurface", "baseColor", "normal", "roughness", "metallic", "occlusion"]
            token outputs:mtlx:surface.connect = </Root/TraySkins/rubberRaw_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (339.79865, 221.9296)
            int ui:nodegraph:node:stackingOrder = 7
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/rubberRaw_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/rubberRaw_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/rubberRaw_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/rubberRaw_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/rubberRaw_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/rubberRaw/M_rubberRaw_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 101
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/rubberRaw/M_rubberRaw_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 102
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/rubberRaw/M_rubberRaw_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 106
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/rubberRaw/M_rubberRaw_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 103
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/rubberRaw/M_rubberRaw_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 104
            }
        }

        def Material "steelScratched_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/steelScratched_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (339.79865, 221.9296)
            int ui:nodegraph:node:stackingOrder = 7
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/steelScratched_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/steelScratched_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/steelScratched_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/steelScratched_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/steelScratched_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/steelScratched/M_steelScratched_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 101
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/steelScratched/M_steelScratched_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 102
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/steelScratched/M_steelScratched_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 106
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/steelScratched/M_steelScratched_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 103
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/steelScratched/M_steelScratched_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 105
            }
        }

        def Material "stoneTravertine_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/stoneTravertine_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (339.79865, 221.9296)
            int ui:nodegraph:node:stackingOrder = 7
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/stoneTravertine_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/stoneTravertine_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/stoneTravertine_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/stoneTravertine_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/stoneTravertine_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/stoneTravertine/M_stoneTravertine_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 102
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/stoneTravertine/M_stoneTravertine_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 103
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/stoneTravertine/M_stoneTravertine_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 108
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/stoneTravertine/M_stoneTravertine_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 105
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/stoneTravertine/M_stoneTravertine_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 107
            }
        }

        def Material "stylizedWoodPlain_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/stylizedWoodPlain_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (339.79865, 221.9296)
            int ui:nodegraph:node:stackingOrder = 7
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/stylizedWoodPlain_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/stylizedWoodPlain_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/stylizedWoodPlain_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/stylizedWoodPlain_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/stylizedWoodPlain_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/stylizedWoodPlain/M_stylizedWoodPlain_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 101
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/stylizedWoodPlain/M_stylizedWoodPlain_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 102
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/stylizedWoodPlain/M_stylizedWoodPlain_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 106
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/stylizedWoodPlain/M_stylizedWoodPlain_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 104
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/stylizedWoodPlain/M_stylizedWoodPlain_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 105
            }
        }

        def Material "terazzoComposite_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/terazzoComposite_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (339.79865, 221.9296)
            int ui:nodegraph:node:stackingOrder = 7
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/terazzoComposite_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/terazzoComposite_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/terazzoComposite_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/terazzoComposite_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/terazzoComposite_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/terazzoComposite/M_terazzoComposite_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 107
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/terazzoComposite/M_terazzoComposite_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 108
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/terazzoComposite/M_terazzoComposite_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 111
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/terazzoComposite/M_terazzoComposite_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 109
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/stylizedWoodPlain/M_stylizedWoodPlain_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 110
            }
        }

        def Material "woodPlain_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/woodPlain_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (339.79865, 221.9296)
            int ui:nodegraph:node:stackingOrder = 7
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/woodPlain_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/woodPlain_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/woodPlain_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/woodPlain_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/woodPlain_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/woodPlain/M_woodPlain_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 101
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/woodPlain/M_woodPlain_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 102
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/woodPlain/M_woodPlain_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 106
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/woodPlain/M_woodPlain_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 103
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/woodPlain/M_woodPlain_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 104
            }
        }

        def Material "steelDarkAged_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/steelDarkAged_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (339.79865, 221.9296)
            int ui:nodegraph:node:stackingOrder = 7
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/steelDarkAged_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/steelDarkAged_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/steelDarkAged_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/steelDarkAged_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/steelDarkAged_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/steelDarkAged/M_steelDarkAged_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 101
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/steelDarkAged/M_steelDarkAged_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 102
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/steelDarkAged/M_steelDarkAged_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 105
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/steelDarkAged/M_steelDarkAged_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 103
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/steelDarkAged/M_steelDarkAged_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 104
            }
        }

        def Material "fabricWoolHerringbone_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/fabricWoolHerringbone_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (319.79865, 201.9296)
            int ui:nodegraph:node:stackingOrder = 6
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/fabricWoolHerringbone_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/fabricWoolHerringbone_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/fabricWoolHerringbone_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/fabricWoolHerringbone_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/fabricWoolHerringbone_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/fabricWoolHerringbone/M_fabricWoolHerringbone_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 116
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/fabricWoolHerringbone/M_fabricWoolHerringbone_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 117
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/fabricWoolHerringbone/M_fabricWoolHerringbone_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 119
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/fabricWoolHerringbone/M_fabricWoolHerringbone_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 120
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/fabricWoolHerringbone/M_fabricWoolHerringbone_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 118
            }
        }

        def Material "leatherWeathered_tray"
        {
            token outputs:mtlx:surface.connect = </Root/TraySkins/leatherWeathered_tray/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            token outputs:surface.connect = None
            float2 ui:nodegraph:node:pos = (339.79865, 221.9296)
            int ui:nodegraph:node:stackingOrder = 7
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (595.2656, 104.76172)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 24

            def Shader "UsdPreviewSurface" (
                active = false
            )
            {
                uniform token info:id = "UsdPreviewSurface"
                token outputs:surface
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                float inputs:ambientOcclusion.connect = </Root/TraySkins/leatherWeathered_tray/occlusion.outputs:out>
                color3f inputs:baseColor.connect = </Root/TraySkins/leatherWeathered_tray/baseColor.outputs:out>
                float inputs:clearcoat
                float3 inputs:clearcoatNormal
                float inputs:clearcoatRoughness
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                float inputs:metallic.connect = </Root/TraySkins/leatherWeathered_tray/metallic.outputs:out>
                float3 inputs:normal.connect = </Root/TraySkins/leatherWeathered_tray/normal.outputs:out>
                float inputs:opacity
                float inputs:opacityThreshold
                float inputs:roughness.connect = </Root/TraySkins/leatherWeathered_tray/roughness.outputs:out>
                float inputs:specular
                token outputs:out
                float2 ui:nodegraph:node:pos = (273.98438, 150.1914)
                int ui:nodegraph:node:stackingOrder = 28
            }

            def Shader "baseColor"
            {
                uniform token info:id = "ND_image_color3"
                asset inputs:file = @DiceTray_skins/leatherStylized-2/M_leatherStylized-2_baseColor.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-249.05481, -101.99056)
                int ui:nodegraph:node:stackingOrder = 111
            }

            def Shader "normal"
            {
                uniform token info:id = "ND_image_vector3"
                asset inputs:file = @DiceTray_skins/leatherStylized-2/M_leatherStylized-2_normal.png@
                string inputs:filtertype
                string inputs:vaddressmode
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-518.7391, -27.626886)
                int ui:nodegraph:node:stackingOrder = 113
            }

            def Shader "roughness"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/leatherStylized-2/M_leatherStylized-2_roughness.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.74948, 569.27167)
                int ui:nodegraph:node:stackingOrder = 115
            }

            def Shader "metallic"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/leatherStylized-2/M_leatherStylized-2_metallic.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-819.1219, 94.67451)
                int ui:nodegraph:node:stackingOrder = 116
            }

            def Shader "occlusion"
            {
                uniform token info:id = "ND_image_float"
                asset inputs:file = @DiceTray_skins/leatherStylized-2/M_leatherStylized-2_occlusion.jpg@
                string inputs:filtertype
                string inputs:vaddressmode
                float outputs:out
                float2 ui:nodegraph:node:pos = (-179.65105, 384.83847)
                int ui:nodegraph:node:stackingOrder = 114
            }
        }
    }

    def Xform "Clouds" (
        active = true
    )
    {
        def Material "Clouds_D20"
        {
            token outputs:mtlx:surface.connect = </Root/Clouds/Clouds_D20/PBRSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

            def Shader "Fractal3D"
            {
                uniform token info:id = "ND_fractal3d_float"
                float inputs:diminish
                float inputs:lacunarity = 3
                int inputs:octaves = 6
                float3 inputs:position.connect = </Root/Clouds/Clouds_D20/Add.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-710.70154, -37.023285)
                int ui:nodegraph:node:stackingOrder = 222
            }

            def Shader "Mix"
            {
                uniform token info:id = "ND_mix_color3"
                color3f inputs:bg = (0.0722022, 0.6603385, 1) (
                    colorSpace = "srgb_displayp3"
                )
                color3f inputs:fg = (1, 1, 1) (
                    colorSpace = "srgb_displayp3"
                )
                float inputs:mix = 0.5
                float inputs:mix.connect = </Root/Clouds/Clouds_D20/Abs.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-231.51562, -77.74219)
                int ui:nodegraph:node:stackingOrder = 230
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:fg"]
            }

            def Shader "Abs"
            {
                uniform token info:id = "ND_absval_float"
                float inputs:in.connect = </Root/Clouds/Clouds_D20/Multiply_1.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-376.0547, -46.910156)
                int ui:nodegraph:node:stackingOrder = 228
            }

            def Shader "Time"
            {
                uniform token info:id = "ND_time_float"
                float outputs:out
                float2 ui:nodegraph:node:pos = (-1255.6953, 11.64403)
                int ui:nodegraph:node:stackingOrder = 133
            }

            def Shader "Position"
            {
                uniform token info:id = "ND_position_vector3"
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-1253.7434, -102.43755)
                int ui:nodegraph:node:stackingOrder = 131
            }

            def Shader "Add"
            {
                uniform token info:id = "ND_add_vector3FA"
                float3 inputs:in1.connect = </Root/Clouds/Clouds_D20/Position.outputs:out>
                float inputs:in2.connect = </Root/Clouds/Clouds_D20/Multiply.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-940.29297, 11.550781)
                int ui:nodegraph:node:stackingOrder = 72
            }

            def Shader "Multiply"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/Clouds/Clouds_D20/Time.outputs:out>
                float inputs:in2 = 0.1
                float outputs:out
                float2 ui:nodegraph:node:pos = (-1131.748, 22.534328)
                int ui:nodegraph:node:stackingOrder = 150
            }

            def Shader "Fractal3D_1"
            {
                uniform token info:id = "ND_fractal3d_float"
                float inputs:diminish
                float inputs:lacunarity = 3
                int inputs:octaves = 6
                float3 inputs:position.connect = </Root/Clouds/Clouds_D20/Add_1.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-712.1822, -242.56276)
                int ui:nodegraph:node:stackingOrder = 222
            }

            def Shader "Multiply_1"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/Clouds/Clouds_D20/Fractal3D_1.outputs:out>
                float inputs:in2.connect = </Root/Clouds/Clouds_D20/Fractal3D.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-492.4375, -46.96875)
                int ui:nodegraph:node:stackingOrder = 137
            }

            def Shader "Multiply_2"
            {
                uniform token info:id = "ND_multiply_vector3"
                float3 inputs:in1.connect = </Root/Clouds/Clouds_D20/Position.outputs:out>
                float3 inputs:in2.connect = None
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-1012.85156, -166.3164)
                int ui:nodegraph:node:stackingOrder = 116
            }

            def Shader "Add_1"
            {
                uniform token info:id = "ND_add_vector3FA"
                float3 inputs:in1.connect = </Root/Clouds/Clouds_D20/Multiply_2.outputs:out>
                float inputs:in2.connect = </Root/Clouds/Clouds_D20/Multiply_3.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-896.71094, -156.64453)
                int ui:nodegraph:node:stackingOrder = 123
            }

            def Shader "Multiply_3"
            {
                uniform token info:id = "ND_multiply_float"
                float inputs:in1.connect = </Root/Clouds/Clouds_D20/Multiply.outputs:out>
                float inputs:in2 = 0.5
                float inputs:in2.connect = None
                float outputs:out
                float2 ui:nodegraph:node:pos = (-1010.3113, -81.39335)
                int ui:nodegraph:node:stackingOrder = 224
            }

            def Shader "Add_2"
            {
                uniform token info:id = "ND_add_color3FA"
                color3f inputs:in1.connect = </Root/Clouds/Clouds_D20/Mix.outputs:out>
                float inputs:in2
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (-94.44429, 62.730732)
                int ui:nodegraph:node:stackingOrder = 259
            }

            def Shader "PBRSurface"
            {
                uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                color3f inputs:baseColor.connect = </Root/Clouds/Clouds_D20/Add_2.outputs:out>
                float3 inputs:clearcoatNormal
                color3f inputs:emissiveColor
                bool inputs:hasPremultipliedAlpha
                token outputs:out
                float2 ui:nodegraph:node:pos = (82.38587, 157.18704)
                int ui:nodegraph:node:stackingOrder = 252
            }
        }
    }

    def Mesh "diceTray" (
        prepend apiSchemas = ["MaterialBindingAPI"]
        references = </Root/diceTray/Geom/default>
    )
    {
        uniform bool doubleSided = 0
        float3[] extent = [(-99.99999, -0.016258, -100), (100, 43.271408, 100)]
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [3, 0, 1, 1, 2, 3, 7, 4, 5, 5, 6, 7, 11, 8, 9, 9, 10, 11, 14, 12, 0, 0, 13, 14, 18, 15, 16, 16, 17, 18, 21, 19, 8, 8, 20, 21, 24, 5, 22, 22, 23, 24, 27, 25, 15, 15, 26, 27, 31, 28, 29, 29, 30, 31, 34, 32, 13, 13, 33, 34, 38, 35, 36, 36, 37, 38, 41, 39, 28, 28, 40, 41, 44, 11, 42, 42, 43, 44, 47, 45, 35, 35, 46, 47, 51, 48, 49, 49, 50, 51, 55, 52, 53, 53, 54, 55, 58, 18, 56, 56, 57, 58, 61, 59, 48, 48, 60, 61, 64, 53, 62, 62, 63, 64, 66, 65, 20, 20, 44, 66, 69, 24, 67, 67, 68, 69, 73, 70, 71, 71, 72, 73, 77, 74, 75, 75, 76, 77, 79, 78, 26, 26, 58, 79, 82, 71, 80, 80, 81, 82, 85, 83, 74, 74, 84, 85, 33, 3, 86, 86, 87, 33, 91, 88, 89, 89, 90, 91, 94, 89, 92, 92, 93, 94, 96, 95, 6, 6, 69, 96, 100, 97, 98, 98, 99, 100, 103, 101, 60, 60, 102, 103, 106, 77, 104, 104, 105, 106, 109, 107, 97, 97, 108, 109, 112, 82, 110, 110, 111, 112, 115, 113, 40, 40, 114, 115, 118, 38, 116, 116, 117, 118, 120, 119, 84, 84, 106, 120, 123, 94, 121, 121, 122, 123, 125, 124, 72, 72, 112, 125, 90, 123, 126, 126, 127, 90, 129, 128, 114, 114, 31, 129, 133, 130, 131, 131, 132, 133, 136, 134, 135, 135, 100, 136, 140, 137, 138, 138, 139, 140, 143, 141, 130, 130, 142, 143, 108, 135, 144, 144, 145, 108, 148, 146, 137, 137, 147, 148, 151, 140, 149, 149, 150, 151, 154, 152, 153, 153, 64, 154, 54, 153, 155, 155, 156, 54, 159, 157, 142, 142, 158, 159, 46, 118, 160, 160, 161, 46, 163, 162, 147, 147, 151, 163, 158, 133, 164, 164, 165, 158, 167, 166, 102, 102, 51, 167, 6, 5, 24, 24, 69, 6, 100, 135, 108, 108, 97, 100, 51, 102, 60, 60, 48, 51, 133, 158, 142, 142, 130, 133, 137, 140, 151, 151, 147, 137, 153, 54, 53, 53, 64, 153, 106, 84, 74, 74, 77, 106, 46, 35, 38, 38, 118, 46, 58, 26, 15, 15, 18, 58, 20, 8, 11, 11, 44, 20, 123, 90, 89, 89, 94, 123, 72, 71, 82, 82, 112, 72, 33, 13, 0, 0, 3, 33, 114, 40, 28, 28, 31, 114, 168, 22, 5, 5, 4, 168, 169, 1, 0, 0, 12, 169, 170, 9, 8, 8, 19, 170, 171, 16, 15, 15, 25, 171, 172, 14, 13, 13, 32, 172, 173, 29, 28, 28, 39, 173, 174, 36, 35, 35, 45, 174, 175, 42, 11, 11, 10, 175, 177, 62, 53, 53, 176, 177, 179, 178, 48, 48, 59, 179, 180, 56, 18, 18, 17, 180, 181, 21, 20, 20, 65, 181, 182, 80, 71, 71, 70, 182, 183, 67, 24, 24, 23, 183, 184, 27, 26, 26, 78, 184, 185, 75, 74, 74, 83, 185, 186, 92, 89, 89, 88, 186, 187, 86, 3, 3, 2, 187, 188, 7, 6, 6, 95, 188, 190, 61, 60, 60, 189, 190, 192, 191, 97, 97, 107, 192, 193, 104, 77, 77, 76, 193, 194, 79, 58, 58, 57, 194, 195, 116, 38, 38, 37, 195, 196, 41, 40, 40, 113, 196, 197, 110, 82, 82, 81, 197, 198, 85, 84, 84, 119, 198, 199, 121, 94, 94, 93, 199, 200, 96, 69, 69, 68, 200, 201, 73, 72, 72, 124, 201, 202, 115, 114, 114, 128, 202, 203, 126, 123, 123, 122, 203, 204, 125, 112, 112, 111, 204, 205, 91, 90, 90, 127, 205, 206, 129, 31, 31, 30, 206, 207, 34, 33, 33, 87, 207, 208, 144, 135, 135, 134, 208, 209, 131, 130, 130, 141, 209, 210, 138, 137, 137, 146, 210, 211, 155, 153, 153, 152, 211, 212, 149, 140, 140, 139, 212, 213, 143, 142, 142, 157, 213, 214, 148, 147, 147, 162, 214, 215, 160, 118, 118, 117, 215, 216, 120, 106, 106, 105, 216, 217, 109, 108, 108, 145, 217, 218, 103, 102, 102, 166, 218, 219, 164, 133, 133, 132, 219, 220, 136, 100, 100, 99, 220, 221, 66, 44, 44, 43, 221, 222, 47, 46, 46, 161, 222, 224, 163, 151, 151, 223, 224, 226, 225, 64, 64, 63, 226, 227, 55, 54, 54, 156, 227, 228, 159, 158, 158, 165, 228, 229, 167, 51, 51, 50, 229]
        rel material:binding = </Root/TraySkins/woodAcajou_tray> (
            bindMaterialAs = "weakerThanDescendants"
        )
        point3f[] points = [(-90.91364, 42.31185, -91.87317), (-91.59213, 42.31185, -91.59213), (-91.58635, 7.468147, -91.58635), (-90.8939, 7.468147, -91.87317), (-91.59213, 42.31185, -91.59213), (-91.87316, 42.31185, -90.91364), (-91.87317, 7.468147, -90.893906), (-91.58635, 7.468147, -91.58635), (-91.87317, 43.271385, -92.86192), (-91.1927, 42.990395, -92.164894), (91.19176, 42.990425, -92.16859), (91.87317, 43.271385, -92.871414), (-91.1927, 42.990395, -92.164894), (90.91364, 42.31185, -91.87317), (91.19176, 42.990425, -92.16859), (-92.871414, 43.271385, -91.87317), (-92.579056, 43.271385, -92.5723), (-98.69966, 43.271378, -98.69742), (-99.00249, 43.271378, -98.00498), (-92.579056, 43.271385, -92.5723), (-97.96849, 43.271378, -98.984245), (-98.69966, 43.271378, -98.69742), (-92.16882, 42.99044, -91.19151), (-92.164894, 42.990417, 91.192696), (-91.87317, 42.311882, 90.91364), (-92.16882, 42.99044, -91.19151), (-92.86192, 43.2714, 91.87317), (-92.164894, 42.990417, 91.192696), (91.87318, 42.31185, -90.91364), (91.59214, 42.311867, -91.59213), (91.58635, 7.468147, -91.58635), (91.87317, 7.468147, -90.893906), (91.59214, 42.311867, -91.59213), (90.893906, 7.468147, -91.87317), (91.58635, 7.468147, -91.58635), (92.86192, 43.271385, -91.87317), (92.164894, 42.990395, -91.192696), (92.16431, 42.987495, 91.18624), (92.86192, 43.2714, 91.87317), (92.164894, 42.990395, -91.192696), (91.87317, 42.30201, 90.90377), (92.16431, 42.987495, 91.18624), (92.57232, 43.271385, -92.579056), (98.68671, 43.271378, -98.686745), (97.9685, 43.271378, -98.984245), (92.57232, 43.271385, -92.579056), (98.984245, 43.271378, -97.9685), (98.68671, 43.271378, -98.686745), (-99.99999, 42.331543, -99.060165), (-99.724724, 42.331543, -99.72473), (-99.71318, 0.963013, -99.71319), (-99.99999, 0.963013, -99.02074), (-99.724724, 42.331543, -99.72473), (-99.06016, 42.331543, -100), (-99.02072, 0.963013, -100), (-99.71318, 0.963013, -99.71319), (-99.7126, 42.996223, -98.74674), (-99.70906, 42.99639, 98.73433), (-98.98424, 43.271408, 97.9685), (-99.7126, 42.996223, -98.74674), (-99.99999, 42.331573, 99.060165), (-99.70906, 42.99639, 98.73433), (-98.734314, 42.99636, -99.709076), (98.73445, 42.996353, -99.70894), (99.060165, 42.331543, -100), (-98.734314, 42.99636, -99.709076), (98.73445, 42.996353, -99.70894), (-91.59213, 42.311882, 91.59213), (-91.58635, 7.46817, 91.58635), (-91.87317, 7.46817, 90.893906), (-91.59213, 42.311882, 91.59213), (-90.91364, 42.311882, 91.87317), (-90.893906, 7.46817, 91.87317), (-91.58635, 7.46817, 91.58635), (-91.87317, 43.2714, 92.871414), (-92.57231, 43.2714, 92.579056), (-98.69738, 43.271408, 98.699684), (-98.004974, 43.271408, 99.00249), (-92.57231, 43.2714, 92.579056), (-98.69738, 43.271408, 98.699684), (-91.19151, 42.990456, 92.16883), (91.1927, 42.990417, 92.164894), (90.91364, 42.311882, 91.87317), (-91.19151, 42.990456, 92.16883), (91.87317, 43.2714, 92.86192), (91.1927, 42.990417, 92.164894), (-90.89378, 6.775703, -91.58635), (90.89379, 6.775703, -91.58635), (-90.89378, 6.775703, -91.58635), (-90.8939, 6.488884, -90.8939), (90.893906, 6.488884, -90.893906), (90.89379, 6.775703, -91.58635), (-91.58635, 6.775703, -90.89378), (-91.58635, 6.775726, 90.89379), (-90.893906, 6.488907, 90.893906), (-91.58635, 6.775703, -90.89378), (-91.58635, 6.775726, 90.89379), (-99.06016, 42.331573, 100), (-99.724724, 42.331596, 99.72473), (-99.71318, 0.963036, 99.71318), (-99.02073, 0.963036, 100), (-99.724724, 42.331596, 99.72473), (-99.99999, 0.963036, 99.02074), (-99.71318, 0.963036, 99.71318), (-98.746735, 42.996254, 99.71261), (98.7217, 42.99051, 99.70753), (97.9685, 43.271408, 98.984245), (-98.746735, 42.996254, 99.71261), (99.04045, 42.31185, 100), (98.7217, 42.99051, 99.70753), (91.59214, 42.30694, 91.58925), (91.58635, 7.46817, 91.58635), (90.893906, 7.46817, 91.87317), (91.59214, 42.30694, 91.58925), (91.87317, 7.46817, 90.893906), (91.58635, 7.46817, 91.58635), (92.57233, 43.2714, 92.5723), (98.69968, 43.271408, 98.69739), (99.00249, 43.271408, 98.00498), (92.57233, 43.2714, 92.5723), (98.69968, 43.271408, 98.69739), (-90.89379, 6.775726, 91.58635), (90.89379, 6.775726, 91.58635), (90.893906, 6.488907, 90.893906), (-90.89379, 6.775726, 91.58635), (90.89379, 6.775726, 91.58635), (91.58635, 6.775726, 90.893845), (91.58635, 6.775703, -90.89379), (91.58635, 6.775726, 90.893845), (91.58635, 6.775703, -90.89379), (99.02074, -0.016228, 99.02074), (99.02064, 0.270592, 99.71318), (-99.020546, 0.270592, 99.71318), (-99.02073, -0.016228, 99.02074), (99.02064, 0.270592, 99.71318), (99.02074, 0.963036, 100), (-99.020546, 0.270592, 99.71318), (100, 0.963036, 99.02074), (99.71319, 0.270592, 99.02064), (99.71319, 0.270561, -99.02064), (100, 0.963013, -99.02074), (99.71319, 0.270592, 99.02064), (99.02074, -0.016258, -99.02074), (99.71319, 0.270561, -99.02064), (99.71319, 0.963036, 99.71318), (99.718956, 42.311836, 99.718956), (99.71319, 0.963036, 99.71318), (100, 42.31185, 99.04045), (99.718956, 42.311836, 99.718956), (99.71319, 0.963013, -99.71319), (99.72476, 42.321724, -99.71899), (100, 42.31182, -99.04045), (99.71319, 0.963013, -99.71319), (99.02074, 0.963013, -100), (99.72476, 42.321724, -99.71899), (99.020546, 0.270561, -99.71319), (-99.02054, 0.270561, -99.71319), (99.020546, 0.270561, -99.71319), (-99.02072, -0.016258, -99.02073), (-99.02054, 0.270561, -99.71319), (99.71115, 42.99041, 98.73406), (99.70753, 42.99048, -98.7217), (99.71115, 42.99041, 98.73406), (99.70753, 42.99048, -98.7217), (-99.71318, 0.270592, 99.020546), (-99.71318, 0.270561, -99.020546), (-99.71318, 0.270592, 99.020546), (-99.71318, 0.270561, -99.020546), (-91.88241, 42.990387, -91.87921), (-91.88241, 42.990387, -91.87921), (-91.88241, 42.990387, -91.87921), (-91.88241, 42.990387, -91.87921), (91.87924, 42.990395, -91.88233), (91.87924, 42.990395, -91.88233), (91.87924, 42.990395, -91.88233), (91.87924, 42.990395, -91.88233), (-99.724724, 42.331543, -99.72473), (-99.425385, 42.996185, -99.42551), (-99.724724, 42.331543, -99.72473), (-99.425385, 42.996185, -99.42551), (-99.425385, 42.996185, -99.42551), (-99.425385, 42.996185, -99.42551), (-91.87921, 42.99041, 91.88241), (-91.87921, 42.99041, 91.88241), (-91.87921, 42.99041, 91.88241), (-91.87921, 42.99041, 91.88241), (-91.45904, 6.902962, -91.45904), (-91.45904, 6.902962, -91.45904), (-91.45904, 6.902962, -91.45904), (-99.724724, 42.331596, 99.72473), (-99.42548, 42.996223, 99.42539), (-99.724724, 42.331596, 99.72473), (-99.42548, 42.996223, 99.42539), (-99.42548, 42.996223, 99.42539), (-99.42548, 42.996223, 99.42539), (91.879364, 42.988945, 91.87786), (91.879364, 42.988945, 91.87786), (91.879364, 42.988945, 91.87786), (91.879364, 42.988945, 91.87786), (-91.459045, 6.902977, 91.459045), (-91.459045, 6.902977, 91.459045), (-91.459045, 6.902977, 91.459045), (91.459045, 6.902977, 91.45906), (91.459045, 6.902977, 91.45906), (91.459045, 6.902977, 91.45906), (91.459045, 6.902962, -91.459045), (91.459045, 6.902962, -91.459045), (91.459045, 6.902962, -91.459045), (99.58588, 0.39785, 99.58588), (99.58588, 0.39785, 99.58588), (99.58588, 0.39785, 99.58588), (99.585846, 0.39782, -99.58588), (99.585846, 0.39782, -99.58588), (99.585846, 0.39782, -99.58588), (99.42102, 42.990395, 99.42098), (99.42102, 42.990395, 99.42098), (99.42102, 42.990395, 99.42098), (99.42102, 42.990395, 99.42098), (-99.58584, 0.39785, 99.585846), (-99.58584, 0.39785, 99.585846), (-99.58584, 0.39785, 99.585846), (99.42147, 42.993324, -99.418434), (99.42147, 42.993324, -99.418434), (99.72476, 42.321724, -99.71899), (99.42147, 42.993324, -99.418434), (99.72476, 42.321724, -99.71899), (99.42147, 42.993324, -99.418434), (-99.58583, 0.39782, -99.58584), (-99.58583, 0.39782, -99.58584), (-99.58583, 0.39782, -99.58584)]
        texCoord2f[] primvars:st = [(0.334494, 0.973352), (0.332822, 0.973623), (0.332822, 0.911997), (0.334528, 0.912654), (0.270147, 0.910948), (0.270418, 0.909277), (0.331116, 0.909242), (0.331773, 0.910948), (0.332822, 0.976746), (0.334012, 0.975028), (0.65172, 0.975034), (0.652911, 0.976763), (0.334012, 0.975028), (0.651239, 0.973352), (0.65172, 0.975034), (0.267008, 0.910948), (0.2674, 0.912295), (0.255992, 0.923703), (0.256327, 0.92163), (0.331476, 0.97637), (0.322204, 0.987411), (0.320067, 0.987779), (0.268737, 0.909757), (0.268742, 0.592049), (0.270418, 0.592531), (0.268737, 0.909757), (0.267024, 0.59086), (0.268742, 0.592049), (0.715315, 0.909277), (0.715586, 0.910948), (0.65396, 0.910948), (0.654617, 0.909242), (0.652911, 0.973623), (0.651205, 0.912654), (0.652911, 0.911997), (0.718709, 0.910948), (0.716994, 0.90976), (0.716989, 0.592061), (0.718709, 0.59086), (0.716994, 0.90976), (0.715298, 0.592549), (0.716989, 0.592061), (0.654258, 0.976372), (0.665652, 0.987766), (0.663529, 0.987412), (0.718334, 0.912296), (0.729374, 0.921566), (0.729728, 0.92369), (0.252028, 0.080049), (0.251781, 0.078412), (0.324752, 0.078412), (0.324093, 0.080118), (0.325799, 0.004395), (0.327436, 0.004642), (0.327505, 0.076706), (0.325799, 0.077366), (0.25459, 0.923815), (0.25459, 0.578011), (0.256359, 0.580242), (0.250391, 0.079703), (0.252028, 0.425177), (0.250391, 0.425507), (0.327107, 0.003005), (0.672895, 0.003005), (0.672564, 0.004642), (0.319973, 0.989181), (0.665762, 0.989181), (0.270147, 0.59086), (0.331773, 0.59086), (0.331116, 0.592566), (0.332822, 0.528185), (0.334494, 0.528456), (0.334528, 0.589154), (0.332822, 0.589811), (0.332822, 0.525045), (0.331476, 0.525438), (0.320067, 0.514029), (0.322141, 0.514365), (0.2674, 0.589513), (0.255992, 0.578105), (0.334119, 0.526784), (0.651615, 0.526784), (0.651239, 0.528456), (0.334119, 0.526784), (0.652911, 0.525062), (0.651615, 0.526784), (0.334526, 0.910948), (0.651207, 0.910948), (0.334526, 0.910948), (0.334528, 0.909242), (0.651205, 0.909242), (0.651207, 0.910948), (0.332822, 0.909245), (0.332822, 0.592563), (0.334528, 0.592566), (0.332822, 0.909245), (0.332822, 0.592563), (0.327436, 0.500585), (0.325799, 0.500832), (0.325799, 0.427861), (0.327505, 0.428521), (0.251781, 0.426815), (0.324093, 0.425109), (0.324752, 0.426815), (0.319956, 0.512627), (0.665744, 0.512627), (0.663529, 0.514397), (0.327089, 0.502222), (0.672529, 0.500551), (0.672878, 0.502222), (0.652911, 0.528189), (0.652911, 0.589811), (0.651205, 0.589154), (0.715581, 0.59086), (0.654617, 0.592566), (0.65396, 0.59086), (0.718332, 0.589515), (0.729747, 0.578099), (0.729406, 0.580178), (0.654256, 0.525439), (0.665672, 0.514024), (0.334526, 0.59086), (0.651207, 0.59086), (0.651205, 0.592566), (0.334526, 0.59086), (0.651207, 0.59086), (0.652905, 0.592563), (0.652905, 0.909245), (0.652905, 0.592563), (0.652905, 0.909245), (0.672495, 0.425109), (0.672498, 0.426811), (0.327502, 0.426818), (0.327505, 0.425109), (0.672498, 0.426811), (0.672495, 0.428521), (0.327502, 0.426818), (0.675907, 0.425109), (0.674201, 0.425111), (0.674201, 0.080116), (0.675907, 0.080118), (0.674201, 0.425111), (0.672495, 0.080118), (0.674201, 0.080116), (0.674201, 0.427861), (0.674201, 0.500813), (0.675248, 0.426815), (0.747937, 0.425143), (0.7482, 0.426815), (0.675248, 0.078412), (0.748205, 0.078412), (0.747937, 0.080084), (0.674201, 0.077366), (0.672495, 0.076706), (0.674201, 0.004409), (0.672498, 0.078409), (0.327502, 0.078416), (0.672498, 0.078409), (0.327505, 0.080118), (0.327502, 0.078416), (0.731143, 0.578009), (0.731143, 0.923786), (0.749609, 0.425509), (0.749609, 0.079731), (0.325802, 0.425111), (0.325795, 0.080116), (0.325802, 0.425111), (0.325795, 0.080116), (0.268747, 0.910948), (0.332822, 0.975024), (0.332822, 0.975024), (0.268747, 0.910948), (0.652911, 0.975024), (0.716986, 0.910948), (0.716986, 0.910948), (0.652911, 0.975024), (0.325799, 0.004395), (0.325799, 0.003005), (0.251781, 0.078412), (0.250391, 0.078412), (0.25459, 0.925105), (0.318665, 0.989181), (0.332822, 0.526784), (0.268747, 0.59086), (0.268747, 0.59086), (0.332822, 0.526784), (0.332822, 0.910948), (0.332822, 0.910948), (0.332822, 0.910948), (0.251781, 0.426815), (0.250391, 0.426815), (0.325799, 0.500832), (0.325799, 0.502222), (0.318665, 0.512627), (0.25459, 0.576703), (0.716986, 0.59086), (0.716986, 0.59086), (0.652911, 0.526784), (0.652911, 0.526784), (0.332822, 0.59086), (0.332822, 0.59086), (0.332822, 0.59086), (0.652911, 0.59086), (0.652911, 0.59086), (0.652911, 0.59086), (0.652911, 0.910948), (0.652911, 0.910948), (0.652911, 0.910948), (0.674201, 0.426815), (0.674201, 0.426815), (0.674201, 0.426815), (0.674201, 0.078412), (0.674201, 0.078412), (0.674201, 0.078412), (0.749609, 0.426815), (0.731143, 0.576703), (0.667068, 0.512627), (0.674201, 0.502222), (0.325799, 0.426815), (0.325799, 0.426815), (0.325799, 0.426815), (0.667068, 0.989181), (0.731143, 0.925105), (0.748205, 0.078412), (0.749609, 0.078412), (0.674201, 0.004409), (0.674201, 0.003005), (0.325799, 0.078412), (0.325799, 0.078412), (0.325799, 0.078412)] (
            interpolation = "vertex"
        )
        uniform token subdivisionScheme = "none"
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.09999997, 0.09999997, 0.09999997)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "trayCover" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        prepend references = @trayCover.usdz@
    )
    {
        rel material:binding = </Root/CoverGlass> (
            bindMaterialAs = "weakerThanDescendants"
        )
        float3 xformOp:scale = (0.1, 0.1, 0.1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Materials"
        {
            over "defaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }
        }

        over "Geom"
        {
            over "default" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </Root/CoverGlass> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }
    }

    def Material "CoverGlass"
    {
        token outputs:mtlx:surface.connect = </Root/CoverGlass/PBRSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

        def Shader "PBRSurface"
        {
            uniform token info:id = "ND_realitykit_pbr_surfaceshader"
            float inputs:ambientOcclusion.connect = None
            color3f inputs:baseColor.connect = </Root/CoverGlass/Image_2.outputs:out>
            float inputs:clearcoat
            float3 inputs:clearcoatNormal
            float inputs:clearcoatRoughness
            color3f inputs:emissiveColor
            bool inputs:hasPremultipliedAlpha
            float inputs:metallic
            float3 inputs:normal.connect = </Root/CoverGlass/Image.outputs:out>
            float inputs:opacity = 0
            float inputs:opacityThreshold
            float inputs:roughness.connect = </Root/CoverGlass/Image_1.outputs:out>
            float inputs:specular = 0.5
            token outputs:out
            float2 ui:nodegraph:node:pos = (68.41016, 81.37109)
            int ui:nodegraph:node:stackingOrder = 89
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
        }

        def Shader "Image"
        {
            uniform token info:id = "ND_image_vector3"
            float3 inputs:default
            asset inputs:file = @Cover_textures/M_trayCover_glassDirt_normal.png@
            string inputs:filtertype
            float2 inputs:texcoord
            string inputs:uaddressmode
            string inputs:vaddressmode
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-514.9757, -173.18582)
            int ui:nodegraph:node:stackingOrder = 83
        }

        def Shader "Image_1"
        {
            uniform token info:id = "ND_image_float"
            asset inputs:file = @Cover_textures/M_trayCover_glassDirt_metallic.jpg@
            string inputs:filtertype
            float outputs:out
            float2 ui:nodegraph:node:pos = (-740.9955, -136.2841)
            int ui:nodegraph:node:stackingOrder = 81
        }

        def Shader "Image_2"
        {
            uniform token info:id = "ND_image_color3"
            asset inputs:file = @Cover_textures/M_trayCover_glassDirt_baseColor.png@
            string inputs:filtertype
            string inputs:vaddressmode
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-291.15918, -205.99725)
            int ui:nodegraph:node:stackingOrder = 85
        }
    }
}

